<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 11 类型转换</title>
    <url>/2024/08/03/C++%2011%20%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="C-11-类型转换"><a href="#C-11-类型转换" class="headerlink" title="C++ 11 类型转换"></a>C++ 11 类型转换</h1><h2 id="1-array"><a href="#1-array" class="headerlink" title="1. array"></a>1. array</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Student</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    array&lt;<span class="type">int</span>, 5&gt; a1;       <span class="comment">// 一个存放int且长度为5的array容器</span></span><br><span class="line">    array&lt;<span class="type">double</span>, 5&gt; a2;    <span class="comment">// 一个存放double且长度为5的array容器</span></span><br><span class="line">    array&lt;Student, 5&gt; a3;   <span class="comment">// 一个存放Student类且长度为5的array容器</span></span><br><span class="line">    array&lt;<span class="type">int</span>, 5&gt; a5;</span><br><span class="line">    </span><br><span class="line">    array&lt;<span class="type">int</span>, 5&gt; a4 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;; <span class="comment">// 不够默认补0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a<span class="number">4.</span><span class="built_in">size</span>(); i++) </span><br><span class="line">        cout &lt;&lt; a4[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值</span></span><br><span class="line">    a<span class="number">1.</span><span class="built_in">assign</span>(<span class="number">10</span>); <span class="comment">// 赋值 #define一下</span></span><br><span class="line">    a5 = a1;</span><br><span class="line">    a<span class="number">1.f</span>ill(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    a<span class="number">4.</span><span class="built_in">swap</span>(a1); <span class="comment">// 交换a1、a4的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// array的大小</span></span><br><span class="line">    <span class="comment">// array.size();        // 容器的大小</span></span><br><span class="line">    <span class="comment">// array.max_size();    // 最大大小 等于size</span></span><br><span class="line">    <span class="comment">// array.empty();       // 判断是否为空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// array的数据存取</span></span><br><span class="line">    <span class="comment">// 使用下标操作 a1[0] = 100;</span></span><br><span class="line">    <span class="comment">// 使用at 方法 如 : a1.at(2) = 100;</span></span><br><span class="line">    <span class="comment">// 接口返回的引用 a2.front() 和 a2.back()</span></span><br><span class="line">    <span class="comment">// 返回内建数组的指针 a1.data()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// array 迭代器访问</span></span><br><span class="line">    <span class="comment">// array.begin();      //返回容器中第一个数据的迭代器。</span></span><br><span class="line">    <span class="comment">// array.end();        //返回容器中最后一个数据之后的迭代器。</span></span><br><span class="line">    <span class="comment">// array.rbegin();     //返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line">    <span class="comment">// array.rend();       //返回容器中倒数最后一个元素的后面的迭代器。</span></span><br><span class="line">    <span class="comment">// array.cbegin();     //返回容器中第一个数据的常量迭代器。</span></span><br><span class="line">    <span class="comment">// array.cend();       //返回容器中最后一个数据之后的常量迭代器。</span></span><br><span class="line">    <span class="comment">// array.crbegin();    //返回容器中倒数第一个元素的常量迭代器。</span></span><br><span class="line">    <span class="comment">// array.crend();      //返回容器中倒数最后一个元素的后面的常量迭代器。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (array&lt;int, 5&gt;::iterator it = arrayInt.begin(); it != arrayInt.end(); ++it)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     int elem = *it;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; elem;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2.类型转换"></a>2.类型转换</h2><h3 id="2-1-C-转换详解"><a href="#2-1-C-转换详解" class="headerlink" title="2.1 C++ 转换详解"></a>2.1 C++ 转换详解</h3><p><font color=GreenYellow>旧式转换：</font> inti &#x3D; 20; char c &#x3D; (char) i;</p>
<p><font color=GreenYellow>新式转换：</font></p>
<p>​		TYPEb&#x3D;类型操作符(a)</p>
<p>​		类型操作符 &#x3D; static_cast | reinterpreter_cast | dynamic_cast | const_cast</p>
<h4 id="2-1-1-static-cast"><a href="#2-1-1-static-cast" class="headerlink" title="2.1.1 static_cast"></a>2.1.1 static_cast</h4><blockquote>
<p>静态类型转换（斯文的劝导，温柔的转换）。如int转换成char 主要用法： </p>
<p>​		• 用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。上行指针或引用(派生类到基类)转换安全，下行不安全 </p>
<p>​		• 用于基本数据类型之间的转换，如把int转换成char，把int转换成 enum。这种转换的安全性也要开发人员来保证。 </p>
<p>​		• 把空指针转换成目标类型的空指针。 </p>
<p>​		• 把任何类型的表达式转换成void类型。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">cry</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数 -&gt; 继承的子类必须实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cry</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;喵喵喵&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cry</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪汪&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// F1: 父子类之间的类型转换</span></span><br><span class="line">    Dog* dog1 = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">    <span class="comment">// 子类指针转换成父类指针</span></span><br><span class="line">    Animal* a1 = <span class="built_in">static_cast</span>&lt;Animal*&gt;(dog1);</span><br><span class="line">    <span class="comment">// 父类的指针转型成子类的指针</span></span><br><span class="line">    Dog* dog1_1 = <span class="built_in">static_cast</span>&lt;Dog*&gt;(a1); </span><br><span class="line">    <span class="comment">// 父类到子类，有风险，这样是不行的，会出现问题</span></span><br><span class="line">    Cat* cat1 = <span class="built_in">static_cast</span>&lt;Cat*&gt;(a1);</span><br><span class="line"></span><br><span class="line">    Dog dog2;</span><br><span class="line">    <span class="comment">// 子类的引用转型到父类的引用</span></span><br><span class="line">    Animal&amp; a2 = <span class="built_in">static_cast</span>&lt;Animal&amp;&gt;(dog2);</span><br><span class="line">    <span class="comment">// 父类到子类引用</span></span><br><span class="line">    Dog&amp; dog2_2 = <span class="built_in">static_cast</span>&lt;Dog&amp;&gt;(a2); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// F2: 基本类型的转换</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">char</span>&gt;(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// F3: 把空指针转换成目标类型的空指针</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">    Dog* dp = <span class="built_in">static_cast</span>&lt;Dog*&gt;(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// F4: 把任何类型的表达式转换成 void 类型</span></span><br><span class="line">    <span class="type">int</span>* pi = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">void</span>* vp = <span class="built_in">static_cast</span>&lt;<span class="type">void</span>*&gt;(pi);</span><br><span class="line">    vp = pi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-1-2-reinterpret-cast"><a href="#2-1-2-reinterpret-cast" class="headerlink" title="2.1.2 reinterpret_cast"></a>2.1.2 reinterpret_cast</h4><blockquote>
<p>重新解释类型(挂羊头，卖狗肉)不同类型间的互转，数值与指针间的互转 </p>
<p>用法：</p>
<p>​		TYPEb&#x3D;reinterpret_cast(a) </p>
<p>​		TYPE必须是一个指针、引用、算术类型、函数指针. </p>
</blockquote>
<p>忠告：滥用reinterpret_cast运算符可能很容易带来风险。除非所需转换本身是低级别的，否则应使用其他强制转换运算符之一。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;动物叫&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cry</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;喵喵喵&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cry</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪汪&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// F1: 数值与指针之间的转换</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>*&gt;(<span class="number">0x99999</span>);</span><br><span class="line">    <span class="type">int</span> val = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>&gt;(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// F2: 不同类型指针和引用之间的转换</span></span><br><span class="line">    Dog dog1;</span><br><span class="line">    Animal* a1 = &amp;dog1;</span><br><span class="line">    a1-&gt;<span class="built_in">cry</span>();</span><br><span class="line">    Dog* dog1_p = <span class="built_in">reinterpret_cast</span>&lt;Dog*&gt;(a1);</span><br><span class="line">    <span class="comment">// 如果能用static_cast，static_cast优先</span></span><br><span class="line">    Dog* dog2_p = <span class="built_in">static_cast</span>&lt;Dog*&gt;(a1); </span><br><span class="line">    <span class="comment">// Cat*cat1_p=static_cast&lt;Cat*&gt;(a1);</span></span><br><span class="line">    <span class="comment">// Cat*cat2_p=static_cast&lt;Cat*&gt;(dog1_p);//NO！不同类型指针转换不能使用static_cast</span></span><br><span class="line">    Cat* cat2_p = <span class="built_in">reinterpret_cast</span>&lt;Cat*&gt;(dog1_p);</span><br><span class="line">    Animal&amp; a2 = dog1;</span><br><span class="line">    Dog&amp; dog3 = <span class="built_in">reinterpret_cast</span>&lt;Dog&amp;&gt;(a2);<span class="comment">//引用强转用法</span></span><br><span class="line">    dog1_p-&gt;<span class="built_in">cry</span>();</span><br><span class="line">    dog2_p-&gt;<span class="built_in">cry</span>();</span><br><span class="line">    cat2_p-&gt;<span class="built_in">cry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * 结果: </span></span><br><span class="line"><span class="comment">    * 汪汪汪</span></span><br><span class="line"><span class="comment">    * 汪汪汪</span></span><br><span class="line"><span class="comment">    * 汪汪汪</span></span><br><span class="line"><span class="comment">    * 汪汪汪</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-3-dynamic-cast"><a href="#5-1-3-dynamic-cast" class="headerlink" title="5.1.3 dynamic_cast"></a>5.1.3 dynamic_cast</h4><blockquote>
<p>动态类型转换 </p>
<p>​		• 将一个基类对象指针cast到继承类指针，dynamic_cast会根据基类指针 是否真正指向继承类指针来做相应处理。失败返回null，成功返回正常cast 后的对象指针； </p>
<p>​		• 将一个基类对象引用cast继承类对象，dynamic_cast会根据基类对象是 否真正属于继承类来做相应处理。失败抛出异常bad_cast</p>
</blockquote>
<p>注意：dynamic_cast在将父类转换到到子类时，父类必须要有虚函数.(不一定非要是纯虚函数)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">cry</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cry</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;喵喵喵&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;猫爱玩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cry</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪汪&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;狗爱玩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">animalPlay</span><span class="params">(Animal&amp; animal)</span> </span>&#123;</span><br><span class="line">    animal.<span class="built_in">cry</span>();</span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Dog&amp; pDog = <span class="built_in">dynamic_cast</span>&lt;Dog&amp;&gt;(animal);</span><br><span class="line">        pDog.<span class="built_in">play</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_cast bc) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是狗，那应该是猫&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Cat&amp; pCat = <span class="built_in">dynamic_cast</span>&lt;Cat&amp;&gt;(animal);</span><br><span class="line">        pCat.<span class="built_in">play</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::bad_cast bc) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是猫，那应该是上面的狗&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dog* dog1 = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">    Animal* a1 = dog1;</span><br><span class="line">    <span class="comment">//animalPlay(a1);</span></span><br><span class="line">    Dog dog2;</span><br><span class="line">    <span class="built_in">animalPlay</span>(dog2);</span><br><span class="line">    Cat* cat1 = <span class="keyword">new</span> <span class="built_in">Cat</span>();</span><br><span class="line">    Animal* a2 = cat1;</span><br><span class="line">    <span class="comment">//animalPlay(a2);</span></span><br><span class="line">    Cat cat2;</span><br><span class="line">    <span class="built_in">animalPlay</span>(cat2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 结果: </span></span><br><span class="line"><span class="comment">    * 汪汪汪</span></span><br><span class="line"><span class="comment">    * 狗爱玩</span></span><br><span class="line"><span class="comment">    * 不是猫，那应该是上面的狗</span></span><br><span class="line"><span class="comment">    * 喵喵喵</span></span><br><span class="line"><span class="comment">    * 不是狗，那应该是猫</span></span><br><span class="line"><span class="comment">    * 猫爱玩</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-3-const-cast"><a href="#5-1-3-const-cast" class="headerlink" title="5.1.3 const_cast"></a>5.1.3 const_cast</h4><blockquote>
<p>去 const 属性：</p>
<p>​		仅针对于指针和引用</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyValue</span><span class="params">(<span class="type">int</span>* ptr)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *ptr = <span class="number">20</span>;  <span class="comment">// 修改被指向的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>* ptr = &amp;value;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>* non_const_ptr = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(ptr);  <span class="comment">// 移除 const 限定符</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">modifyValue</span>(non_const_ptr);  <span class="comment">// 此时可以安全修改 value 的值</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *non_const_ptr &lt;&lt; endl; <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-4-总结"><a href="#5-1-4-总结" class="headerlink" title="5.1.4 总结"></a>5.1.4 总结</h4><ol>
<li><p>static_cast 静态类型转换，编译的时c++编译器会做编译时的类型检查；隐式转换； 基本类型转换，父子类之间合理转换 </p>
</li>
<li><p>若不同类型之间，进行强制类型转换，用reinterpret_cast&lt;&gt;() 进行重新解释. 建议： C语言中能隐式类型转换的，在c++中可用 static_cast&lt;&gt;()进行类型转换。因C++ 编译器在编译检查一般都能通过；C语言中不能隐式类型转换的，在c++中可以用 reinterpret_cast&lt;&gt;() 进行强制类型解释。 总结：static_cast&lt;&gt;()和 reinterpret_cast&lt;&gt;() 基本上把 C 语言中的强制类型转换给覆盖，注意reinterpret_cast&lt;&gt;()很难保证移植性。 </p>
</li>
<li><p>dynamic_cast&lt;&gt;()，动态类型转换，安全的虚基类和子类之间转换；运行时类型检查 </p>
</li>
<li><p>const_cast&lt;&gt;()，去除变量的只读属性 最后的忠告 ：程序员必须清楚的知道: 要转的变量，类型转换前是什么类型，类型转换后是什么类型，转换后有什么后果。</p>
</li>
</ol>
<p> C++大牛建议：一般情况下，不建议进行类型转换；避免进行类型转换。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Modbus 功能码详解</title>
    <url>/2024/08/10/Modbus%E5%8A%9F%E8%83%BD%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Modbus-功能码详解"><a href="#Modbus-功能码详解" class="headerlink" title="Modbus 功能码详解"></a>Modbus 功能码详解</h1><h2 id="1-功能码概述"><a href="#1-功能码概述" class="headerlink" title="1.功能码概述"></a>1.功能码概述</h2><p>功能码占用一个字节（ASCII模式使用两个字节表示，RTU模式使用一个字节表示），范围：1 ~ 127（如果出现异常，Modbus从设备返回的异常数据中，功能码最高位置1，相当于增加128，所以异常范围是：129 ~ 255）</p>
<h3 id="1-1-公共功能码"><a href="#1-1-公共功能码" class="headerlink" title="1.1 公共功能码"></a>1.1 公共功能码</h3><p>Modbus协会确认的，功能被明确定义的。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>名称</th>
<th>位&#x2F;字操作</th>
<th>操作数量</th>
<th>寄存器PLC地址</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>读线圈状态</td>
<td>位操作</td>
<td>单个或多个</td>
<td>00001 ~ 09999</td>
</tr>
<tr>
<td>02</td>
<td>读离散输入状态</td>
<td>位操作</td>
<td>单个或多个</td>
<td>10001 ~ 19999</td>
</tr>
<tr>
<td>03</td>
<td>读保持寄存器</td>
<td>字操作</td>
<td>单个或多个</td>
<td>40001 ~ 49999</td>
</tr>
<tr>
<td>04</td>
<td>读输入寄存器</td>
<td>字操作</td>
<td>单个或多个</td>
<td>30001 ~ 39999</td>
</tr>
<tr>
<td>05</td>
<td>写单个线圈</td>
<td>位操作</td>
<td>单个</td>
<td>00001 ~ 09999</td>
</tr>
<tr>
<td>06</td>
<td>写单个保持寄存器</td>
<td>字操作</td>
<td>单个</td>
<td>40001 ~ 49999</td>
</tr>
<tr>
<td>15</td>
<td>写多个线圈</td>
<td>位操作</td>
<td>多个</td>
<td>00001 ~ 09999</td>
</tr>
<tr>
<td>16</td>
<td>写多个保持寄存器</td>
<td>字操作</td>
<td>多个</td>
<td>40001 ~ 49999</td>
</tr>
</tbody></table>
<h3 id="1-2-用户自定义功能码"><a href="#1-2-用户自定义功能码" class="headerlink" title="1.2 用户自定义功能码"></a>1.2 用户自定义功能码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">65 ~ 72, 100 ~ 110</span><br></pre></td></tr></table></figure>

<h3 id="1-3-保留功能码"><a href="#1-3-保留功能码" class="headerlink" title="1.3 保留功能码"></a>1.3 保留功能码</h3><p>不做公共使用</p>
<h2 id="2-功能码的操作类型"><a href="#2-功能码的操作类型" class="headerlink" title="2. 功能码的操作类型"></a>2. 功能码的操作类型</h2><p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810215231040.png" alt="image-20240810215231040"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>位操作：最小操作单位是1位</p>
<p>字操作：最小操作单位是2个字节</p>
<h2 id="3-案例"><a href="#3-案例" class="headerlink" title="3. 案例"></a>3. 案例</h2><h3 id="3-1-读线圈状态"><a href="#3-1-读线圈状态" class="headerlink" title="3.1 读线圈状态"></a>3.1 读线圈状态</h3><p><strong>需求实例</strong></p>
<p>读取设备地址为3的从设备的线圈状态寄存器，线圈地址为19 ~ 55（从0开始计算）共37个状态</p>
<p><strong>查询报文</strong></p>
<p>RTU模式：</p>
<table>
<thead>
<tr>
<th>从设备地址</th>
<th>功能码</th>
<th>寄存器起始地址（高位）</th>
<th>寄存器起始地址（低位）</th>
<th>寄存器数量（高位）</th>
<th>寄存器数量（低位）</th>
<th>CRC校验</th>
</tr>
</thead>
<tbody><tr>
<td>0x03</td>
<td>0x01</td>
<td>0x00</td>
<td>0x13</td>
<td>0x00</td>
<td>0x25</td>
<td>2字节的CRC校验码</td>
</tr>
</tbody></table>
<p><strong>响应报文</strong></p>
<table>
<thead>
<tr>
<th>19</th>
<th>20</th>
<th>21</th>
<th>22</th>
<th>23</th>
<th>24</th>
<th>25</th>
<th>26</th>
</tr>
</thead>
<tbody><tr>
<td>ON</td>
<td>ON</td>
<td>OFF</td>
<td>OFF</td>
<td>ON</td>
<td>OFF</td>
<td>ON</td>
<td>OFF</td>
</tr>
<tr>
<td><strong>27</strong></td>
<td><strong>28</strong></td>
<td><strong>29</strong></td>
<td><strong>30</strong></td>
<td><strong>31</strong></td>
<td><strong>32</strong></td>
<td><strong>33</strong></td>
<td><strong>34</strong></td>
</tr>
<tr>
<td>ON</td>
<td>ON</td>
<td>OFF</td>
<td>ON</td>
<td>OFF</td>
<td>ON</td>
<td>ON</td>
<td>OFF</td>
</tr>
<tr>
<td><strong>35</strong></td>
<td><strong>36</strong></td>
<td><strong>37</strong></td>
<td><strong>38</strong></td>
<td><strong>39</strong></td>
<td><strong>40</strong></td>
<td><strong>41</strong></td>
<td><strong>42</strong></td>
</tr>
<tr>
<td>ON</td>
<td>OFF</td>
<td>OFF</td>
<td>OFF</td>
<td>OFF</td>
<td>OFF</td>
<td>OFF</td>
<td>OFF</td>
</tr>
<tr>
<td><strong>43</strong></td>
<td><strong>44</strong></td>
<td><strong>45</strong></td>
<td><strong>46</strong></td>
<td><strong>47</strong></td>
<td><strong>48</strong></td>
<td><strong>49</strong></td>
<td><strong>50</strong></td>
</tr>
<tr>
<td>OFF</td>
<td>OFF</td>
<td>ON</td>
<td>OFF</td>
<td>ON</td>
<td>ON</td>
<td>ON</td>
<td>ON</td>
</tr>
<tr>
<td><strong>51</strong></td>
<td><strong>52</strong></td>
<td><strong>53</strong></td>
<td><strong>54</strong></td>
<td><strong>55</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ON</td>
<td>ON</td>
<td>OFF</td>
<td>ON</td>
<td>ON</td>
<td>0(补充)</td>
<td>0(补充)</td>
<td>0(补充)</td>
</tr>
</tbody></table>
<p>在响应报文中，ON用1表示，OFF用0表示</p>
<p>1个字节，可以表示8位，最后不能填满的用0补充</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19-26位: 1100 1010 -&gt; 对应数据: 0101 0011(逆序,低位在右边),即: 0x53</span><br><span class="line">27-34位: 0110 1011 -&gt; 即: 0x6B</span><br><span class="line">35-42位: 0000 0001 -&gt; 即: 0x01</span><br><span class="line">43-50位: 1111 0100 -&gt; 即: 0xF4</span><br><span class="line">51-55位: 0001 1011 -&gt; 即: 0x1B</span><br></pre></td></tr></table></figure>

<p><strong>响应包:(RTU模式)</strong></p>
<table>
<thead>
<tr>
<th>从设备地址</th>
<th>功能码</th>
<th>数据域长度(字节数)</th>
<th>数据1</th>
<th>数据2</th>
<th>数据3</th>
<th>数据4</th>
<th>数据5</th>
<th>CRC校验</th>
</tr>
</thead>
<tbody><tr>
<td>0x03</td>
<td>0x01</td>
<td>0x05</td>
<td>0x53</td>
<td>0x6B</td>
<td>0x01</td>
<td>0xF4</td>
<td>0x1B</td>
<td>2字节的CRC校验码</td>
</tr>
</tbody></table>
<p><strong>使用工具仿真：</strong></p>
<p><em><strong>Modbus Slave</strong></em></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810221727067.png" alt="image-20240810221727067"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810221802154.png" alt="image-20240810221802154"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810221823685.png" alt="image-20240810221823685"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810221937914.png" alt="image-20240810221937914"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><em><strong>Modbus Poll</strong></em></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810222112121.png" alt="image-20240810222112121"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810222147622.png" alt="image-20240810222147622"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810222156980.png" alt="image-20240810222156980"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>其他的寄存器只需按照修改即可</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
  </entry>
  <entry>
    <title>Modbus 协议开发</title>
    <url>/2024/08/10/Modbus%E5%8D%8F%E8%AE%AE%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Modbus-协议开发"><a href="#Modbus-协议开发" class="headerlink" title="Modbus 协议开发"></a>Modbus 协议开发</h1><h2 id="1-Modbus-协议简介"><a href="#1-Modbus-协议简介" class="headerlink" title="1. Modbus 协议简介"></a>1. Modbus 协议简介</h2><p>• Modbus协议，是单主&#x2F;多从协议</p>
<p>• 同一时刻，只能有一个主设备，一个或多个从设备（最多247个）</p>
<p>• 只能由主设备发起通信请求</p>
<p>• 从设备没有收到主设备的请求时，不能主动发送数据</p>
<p>• 只能在主设备和从设备之间通信，从设备之间不能通信</p>
<p>• 主设备只能同时启动一个modbus访问事务（即一个事务处理完之后，才能发起另一个事务）</p>
<p>• 主设备和从设备之间，有两种通信方式：单播模式、广播模式</p>
<h2 id="2-单播模式和广播模式"><a href="#2-单播模式和广播模式" class="headerlink" title="2. 单播模式和广播模式"></a>2. 单播模式和广播模式</h2><h3 id="2-1-单播模式"><a href="#2-1-单播模式" class="headerlink" title="2.1 单播模式"></a>2.1 单播模式</h3><table>
<thead>
<tr>
<th>从设备地址(1-247)</th>
<th>功能码</th>
<th>数据段(从设备内的寄存器地址，寄存器数量)</th>
<th>差错校验</th>
</tr>
</thead>
</table>
<p><strong>数据段：</strong>可以用来表示从“哪个寄存器”（2个字节）开始读取语句，以及要读取的”寄存器数量“（2个字节）</p>
<p><strong>数据段的长度：</strong>是可变的，某些功能码，数据段是空的</p>
<h4 id="2-1-1-请求报文实例"><a href="#2-1-1-请求报文实例" class="headerlink" title="2.1.1 请求报文实例"></a>2.1.1 请求报文实例</h4><p>​	从设备地址为1，需要获取从设备的指定”输入寄存器“（寄存器的PLC地址为：30001），在modbus RTU模式下，查询帧为：</p>
<table>
<thead>
<tr>
<th>0x01</th>
<th>0x04</th>
<th>0x00 0x00    0x00 0x01</th>
<th>0x31</th>
</tr>
</thead>
</table>
<p>单播模式中，主设备发送请求报文后，指定的从设备发送一个响应报文。从设备的地址范围是1~247，主设备本身不使用设备地址。</p>
<h3 id="2-2-广播模式"><a href="#2-2-广播模式" class="headerlink" title="2.2 广播模式"></a>2.2 广播模式</h3><p>广播模式中，主设备向所有设备发送请求指令（注意，只有一个请求报文，设备地址是0），所有的从设备收到广播请求后，执行相应的处理，但是不返回任何报文。</p>
<h2 id="3-Modbus寄存器"><a href="#3-Modbus寄存器" class="headerlink" title="3. Modbus寄存器"></a>3. Modbus寄存器</h2><p>modbus寄存器：是指从设备具体的”物理寄存器“，也可能只是从设备的一块内存区域。</p>
<h3 id="3-1-modbus寄存器的种类"><a href="#3-1-modbus寄存器的种类" class="headerlink" title="3.1 modbus寄存器的种类"></a>3.1 modbus寄存器的种类</h3><h4 id="3-1-1-线圈状态寄存器（读-写）"><a href="#3-1-1-线圈状态寄存器（读-写）" class="headerlink" title="3.1.1 线圈状态寄存器（读&#x2F;写）"></a>3.1.1 线圈状态寄存器（读&#x2F;写）</h4><p>实际上就可以类比为开关量（继电器状态），每一个bit对应一个信号的开关状态，所以一个byte就可以同时控制8路的信号。</p>
<p>比如控制外部8路io的高低</p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810101852374.png" alt="image-20240810101852374"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="3-1-2-离散输入状态寄存器（只读）"><a href="#3-1-2-离散输入状态寄存器（只读）" class="headerlink" title="3.1.2 离散输入状态寄存器（只读）"></a>3.1.2 离散输入状态寄存器（只读）</h4><p>离散输入寄存器就相当于线圈寄存器的只读模式，也是每个bit表示一个开关量，而他的开关量只能读取输入的开关信号，是不能够写的。</p>
<p>比如：使用离散输入状态寄存器，读取拨码开关的”开关状态“。</p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810102201886.png" alt="image-20240810102201886"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="3-1-3-保持寄存器（读-写）"><a href="#3-1-3-保持寄存器（读-写）" class="headerlink" title="3.1.3 保持寄存器（读&#x2F;写）"></a>3.1.3 保持寄存器（读&#x2F;写）</h4><p>可以通过命令读取写的寄存器，通常是一些功能控制寄存器或者输出寄存器。</p>
<p>无符号双字节整形（unsigned short）</p>
<p>比如：步进电机控制器中，用来控制电机旋转多少角度的寄存器。</p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810102511668.png" alt="image-20240810102511668"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="3-1-4-输入寄存器（只读）"><a href="#3-1-4-输入寄存器（只读）" class="headerlink" title="3.1.4 输入寄存器（只读）"></a>3.1.4 输入寄存器（只读）</h4><p>只能读不能写，无符号双字节整形（unsigned short）</p>
<p>通常是状态寄存器或者是输入结果寄存器等。</p>
<p>输入是模拟量的输入。</p>
<p>比如：模拟量输入</p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810102714167.png" alt="image-20240810102714167"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="3-2-Modbus寄存器的地址"><a href="#3-2-Modbus寄存器的地址" class="headerlink" title="3.2 Modbus寄存器的地址"></a>3.2 Modbus寄存器的地址</h3><table>
<thead>
<tr>
<th>寄存器种类</th>
<th>寄存器PLC地址</th>
<th>寄存器Modbus协议地址</th>
<th>简称</th>
<th>读写状态</th>
</tr>
</thead>
<tbody><tr>
<td>线圈状态</td>
<td>00001 ~ 09999</td>
<td>0000H ~ FFFFH</td>
<td>0x</td>
<td>可读可写</td>
</tr>
<tr>
<td>离散输入状态</td>
<td>10001 ~ 19999</td>
<td>0000H ~ FFFFH</td>
<td>1x</td>
<td>只读</td>
</tr>
<tr>
<td>输入寄存器</td>
<td>30001 ~ 39999</td>
<td>0000H ~ FFFFH</td>
<td>3x</td>
<td>只写</td>
</tr>
<tr>
<td>保持寄存器</td>
<td>40001 ~ 49999</td>
<td>0000H ~ FFFFH</td>
<td>4x</td>
<td>可读可写</td>
</tr>
</tbody></table>
<h2 id="4-Modbus串行消息帧格式"><a href="#4-Modbus串行消息帧格式" class="headerlink" title="4. Modbus串行消息帧格式"></a>4. Modbus串行消息帧格式</h2><p>在串口通道上，modbus协议有两种帧格式：</p>
<p>• modbus ASCII 模式</p>
<p>• modbus RTU 模式</p>
<h3 id="4-1-Modbus-ASCII-消息帧格式"><a href="#4-1-Modbus-ASCII-消息帧格式" class="headerlink" title="4.1 Modbus ASCII 消息帧格式"></a>4.1 Modbus ASCII 消息帧格式</h3><p>消息中的没个8bit的字节数据，用对应的两个ASCII字符发送。</p>
<p><strong>例如：</strong></p>
<p>一个字节的数据：0x5B，就使用’5’和’B’传输，</p>
<p>‘5’对应的ASCII码值是 0x35</p>
<p>‘B’对应的ASCII码值是 0x42</p>
<p>所以使用0x35 0x42这两个字节传输</p>
<p><strong>帧格式：</strong></p>
<table>
<thead>
<tr>
<th>起始（帧头）</th>
<th>地址（从设备地址）</th>
<th>功能代码</th>
<th>数据</th>
<th>LRC校验</th>
<th>结束（帧尾）</th>
</tr>
</thead>
<tbody><tr>
<td>1字节</td>
<td>2字节</td>
<td>2字节</td>
<td>0 - 2*252 字节</td>
<td>2字节</td>
<td>2字节</td>
</tr>
<tr>
<td>0x3A（字符’:’）</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0x0D 0x0A（回车 换行）</td>
</tr>
</tbody></table>
<p>（1）当网络上的modbus设备检测到0x3A(字符’:’)时，每个设备进入解码状态，并检测下一字段，是否是发给自己的。</p>
<p>（2）字符的发送间隔时间不超过1秒</p>
<p><strong>优缺点：</strong></p>
<p>更容易调试。</p>
<p>数据传输速度比较慢，不适合高速通信，适合与ASCII码有关的设备之间进行通信。</p>
<h3 id="4-2-Modbus-RTU-消息帧格式"><a href="#4-2-Modbus-RTU-消息帧格式" class="headerlink" title="4.2 Modbus RTU 消息帧格式"></a>4.2 Modbus RTU 消息帧格式</h3><p>RTU模式中，每一帧的时间间隔（比如请求消息和响应消息），至少为3.5个字符时间（可以大于3.5）；</p>
<p>在同一帧报文内部，两个字符之间的时间间隔不能大于1.5个字符时间，否则直接将整个报文丢弃。</p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810163020348.png" alt="image-20240810163020348"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>1个字符包含：</p>
<p>1个起始位，8位数据位，1位校验位（或者没有），1位停止位（一般有），共11位</p>
<p>3.8个字符：就是3.5 * 11 &#x3D; 38.5位</p>
<p>如果波特率是 9600b&#x2F;s，那么：(1000 &#x2F; 9600) * 38.5 &#x3D; 4.0104167ms</p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240810163257877.png" alt="image-20240810163257877"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="4-3-Modbus-地址域"><a href="#4-3-Modbus-地址域" class="headerlink" title="4.3 Modbus 地址域"></a>4.3 Modbus 地址域</h3><p>表示modbus从设备的地址：1 - 247</p>
<p>广播地址：0</p>
<p>从设备发送响应包时，地址不变（依旧是这个从设备的地址，和请求包的地址相同）</p>
<p>ASCII 模式中，地址是2个字节</p>
<p>RTU模式中，地址是1个字节</p>
<h3 id="4-4-Modbus-功能码"><a href="#4-4-Modbus-功能码" class="headerlink" title="4.4 Modbus 功能码"></a>4.4 Modbus 功能码</h3><p>1个字节，1-255</p>
<p>需要根据从设备寄存器类型，来选择合适的功能码。</p>
<p><strong>常用的功能码：</strong></p>
<table>
<thead>
<tr>
<th>代码</th>
<th>名称</th>
<th>位&#x2F;字操作</th>
<th>操作数量</th>
<th>寄存器PLC地址</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>读线圈状态</td>
<td>位操作</td>
<td>单个或多个</td>
<td>00001 ~ 09999</td>
</tr>
<tr>
<td>02</td>
<td>读离散输入状态</td>
<td>字操作</td>
<td>单个或多个</td>
<td>10001 ~ 19999</td>
</tr>
<tr>
<td>03</td>
<td>读保存寄存器</td>
<td>字操作</td>
<td>单个或多个</td>
<td>40001 ~ 49999</td>
</tr>
<tr>
<td>04</td>
<td>读输入寄存器</td>
<td>字操作</td>
<td>单个或多个</td>
<td>30001 ~ 39999</td>
</tr>
<tr>
<td>05</td>
<td>写单个线圈</td>
<td>位操作</td>
<td>单个</td>
<td>00001 ~ 09999</td>
</tr>
<tr>
<td>06</td>
<td>写单个保持寄存器</td>
<td>字操作</td>
<td>单个</td>
<td>40001 ~ 49999</td>
</tr>
<tr>
<td>15</td>
<td>写多个线圈</td>
<td>位操作</td>
<td>多个</td>
<td>00001 ~ 09999</td>
</tr>
<tr>
<td>16</td>
<td>写多个保持寄存器</td>
<td>字操作</td>
<td>多个</td>
<td>40001 ~ 49999</td>
</tr>
</tbody></table>
<p>字操作的最小单位是两字节，位操作的最小单位是1位(bit)</p>
<h3 id="4-5-数据域"><a href="#4-5-数据域" class="headerlink" title="4.5 数据域"></a>4.5 数据域</h3><p>具体内容取决于功能码，以字节为单位，长度可变，对于某些功能码，数据域可以为空。</p>
<h3 id="4-6-校验域"><a href="#4-6-校验域" class="headerlink" title="4.6 校验域"></a>4.6 校验域</h3><p><strong>ASCII模式：</strong></p>
<p>2个字节，对整个报文执行“纵向冗余校验”（LRC）</p>
<p>校验内容不含帧头（冒号），帧尾（回车换行）</p>
<p>实际校验内容只有一个字节，因为使用ASCII模式，占用两个字节</p>
<p><strong>RTU模式：</strong></p>
<p>2个字节，对整个报文执行“循环冗余校验”（CRC-16）</p>
<p>纠错能力强</p>
<h2 id="5-大小端"><a href="#5-大小端" class="headerlink" title="5. 大小端"></a>5. 大小端</h2><p>大端序（BigEndian）：字数据的高字节存储在低地址中，低字节存储在高地址中。 </p>
<p>小端序（LittleEndian）：字数据的高字节存储在高地址中，低字节存储在低地址中。</p>
<p>例如：将<code>12345678h</code>写入<code>1000h</code>开始的内存中：</p>
<table>
<thead>
<tr>
<th>存放顺序</th>
<th>1000h</th>
<th>1001h</th>
<th>1002h</th>
<th>1003h</th>
</tr>
</thead>
<tbody><tr>
<td>大端</td>
<td>12h</td>
<td>34h</td>
<td>56h</td>
<td>78h</td>
</tr>
<tr>
<td>小端</td>
<td>78h</td>
<td>56h</td>
<td>34h</td>
<td>12h</td>
</tr>
</tbody></table>
<p>Modbus 协议本身不指定是使用大端序还是小端序。 在ModbusRTU模式下，常使用小端序来表示寄存器地址和数据。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx 反向代理</title>
    <url>/2024/07/14/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="Nginx-反向代理-Tomcat-为例"><a href="#Nginx-反向代理-Tomcat-为例" class="headerlink" title="Nginx 反向代理(Tomcat 为例)"></a>Nginx 反向代理(Tomcat 为例)</h2><p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/1.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ano # 查看端口信息</span><br></pre></td></tr></table></figure>



<h3 id="配置-tomcat-相关信息："><a href="#配置-tomcat-相关信息：" class="headerlink" title="配置 tomcat 相关信息："></a>配置 tomcat 相关信息：</h3><ul>
<li><strong>打开 apache-tomcat-8.5.93\conf\server.xml 修改信息如下（此处的端口在上面扫描出的端口中并没有被占用的）:</strong></li>
</ul>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/2.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>启动 tomcat</li>
</ul>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/fee438428101f0aaa1d96deed2be7a07.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>结果图：</p>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20240511221052426.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><ul>
<li>解压压缩包 <a href="https://nginx.org/download/nginx-1.25.5.zip">点击下载文件</a></li>
</ul>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20240511221224754.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx # 命令框启动服务 注意不要开启多个服务</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20240511221346532.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>修改 <strong>nginx-1.25.5\conf\nginx.conf</strong> 配置文件</p>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/fa4537519a39b94695a45c14accddde7.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /demo &#123;</span><br><span class="line">	proxy_pass http://localhost:8081;</span><br><span class="line">	rewrite ^/demo(.*)$ $1 break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># ^/demo(.*)$ 是一个正则表达式，它匹配以 /demo 开头的 URL，并捕获后续的任意字符（(.*)）。</span><br><span class="line"># $1 表示捕获的内容，它将被替换成重写后的 URL 的一部分。</span><br><span class="line"># break 指令告诉 Nginx 在执行完当前规则后停止匹配其他规则。</span><br><span class="line"></span><br><span class="line"># 如果不加这一行，访问的就是http://localhost/demo/index.html (这里需要注意)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>重新加载nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20240511222009951.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/demo/</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/../picture/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20240511221953362.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="Linux-配置（续）"><a href="#Linux-配置（续）" class="headerlink" title="Linux 配置（续）"></a>Linux 配置（续）</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>I/O 复用</title>
    <url>/2024/07/28/IO%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-基于-I-O-复用的服务端"><a href="#1-基于-I-O-复用的服务端" class="headerlink" title="1.基于 I&#x2F;O 复用的服务端"></a>1.基于 I&#x2F;O 复用的服务端</h3><h5 id="多进程服务端的缺点和解决方法"><a href="#多进程服务端的缺点和解决方法" class="headerlink" title="多进程服务端的缺点和解决方法"></a>多进程服务端的缺点和解决方法</h5><p>​		为了构建并发服务器，只要有客户端连接请求就会创建新进程。这的确是实际操作中采用的一种方案,但并非十全十美,因为创建进程时需要付出极大代价。这需要大量的运算和内存空间。由于每个进程都具有独立的内存空间，所以相互间的数据交换也要求采用相对复杂的方法(IPC属于相对复杂的通信方法)。</p>
<p>​		如何解决呢？<font color=Aquamarine>使用 I&#x2F;O 复用技术。</font></p>
<p><font color=SpringGreen>复用概念：(1)在1个通信频道中传递多个数据或者信号的技术(或：为了提高物理设备的效率，用最少的物理要素传递最多的数据时使用的技术)。</font></p>
<h5 id="复用技术在服务端的应用"><a href="#复用技术在服务端的应用" class="headerlink" title="复用技术在服务端的应用"></a>复用技术在服务端的应用</h5><p><img src="/../picture/IO%E5%A4%8D%E7%94%A8/image-20240724220925107.png" alt="image-20240724220925107"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<center>之前采用的形式</center>

<p><img src="/../picture/IO%E5%A4%8D%E7%94%A8/image-20240724220935830.png" alt="image-20240724220935830"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<center>I/O复用的形式</center>

<p>通过 I&#x2F;O 复用技术，可以减少进程数，重要的是，无论连接多少客户端，提供服务的进程只有1个。</p>
<h3 id="2-理解-select-函数并实现服务端"><a href="#2-理解-select-函数并实现服务端" class="headerlink" title="2.理解 select 函数并实现服务端"></a>2.理解 select 函数并实现服务端</h3><h5 id="select-函数的功能和调用顺序"><a href="#select-函数的功能和调用顺序" class="headerlink" title="select 函数的功能和调用顺序"></a>select 函数的功能和调用顺序</h5><p><font color=red>使用 select 函数时可以将多个文件描述符集中到一起监视。</font></p>
<p><img src="/../picture/IO%E5%A4%8D%E7%94%A8/image-20240724221725247.png" alt="image-20240724221725247"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h5 id="设置文件描述符"><a href="#设置文件描述符" class="headerlink" title="设置文件描述符"></a>设置文件描述符</h5><p>​		使用 select 函数可以同时监视多个文件描述符。当然，监视文件描述符可以视为监视套接字。此时首先需要将监视的文件描述符集中到一起，集中时也要按照监视项(接收、传输、异常)进行区分，即按照上述3种监视项分成3类。</p>
<p>​	使用 fd_set 数组变量执行此操作，该数组是存有0和1的位数组。<font color=Yellow>如果某位设置为1，则表示该文件描述符是监视对象。</font></p>
<p><img src="/../picture/IO%E5%A4%8D%E7%94%A8/image-20240724222059034.png" alt="image-20240724222059034"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		在 fd_set 变量中注册或更改值的操作都由一下宏完成：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *set)</span>			:将fd_set变量的所有位初始化为<span class="number">0</span></span></span><br><span class="line"><span class="function">void FD_SET(int fd, fd_set *set)	 :在参数fdset指向的变量中注册文件描述符fd的信息 </span></span><br><span class="line"><span class="function">void FD_CLR(int fd, fd_set *set)	 :在参数fdset指向的变量中清除文件描述符fd的信息</span></span><br><span class="line"><span class="function">int  FD_ISSET(int fd, fd_set *set)   :若参数fdset指向的变量中包含文件描述符fd的信息，则返回<span class="string">&quot;真&quot;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/../picture/IO%E5%A4%8D%E7%94%A8/image-20240724223005007.png" alt="image-20240724223005007"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h5 id="设置检查-监视-范围及超时"><a href="#设置检查-监视-范围及超时" class="headerlink" title="设置检查(监视)范围及超时"></a>设置检查(监视)范围及超时</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">int</span> maxfd, fd_set* readset, fd_set* writeset, fd_set* exceptset, <span class="type">const</span> <span class="keyword">struct</span> timeval* timeout)</span></span>;</span><br><span class="line">	-&gt; 成功返回大于<span class="number">0</span>的值，失败返回<span class="number">-1</span></span><br><span class="line">        • maxfd		监视对象文件描述符数量</span><br><span class="line">        • readset	将所有关注<span class="string">&quot;是否存在待读取数据&quot;</span>的文件描述符注册到fd_set型变量，并传递其地址值</span><br><span class="line">        • writeset	将所有关注<span class="string">&quot;是否可传输无阻塞数据&quot;</span>的文件描述符注册到fd_set型变量，并传递其地址值。</span><br><span class="line">        • exceptset 将所有关注<span class="string">&quot;是否发生异常&quot;</span>的文件描述符注册到fd_set型变量，并传递其地址值。</span><br><span class="line">        • timeout   调用select函数后，为防止陷入无限阻塞的状态，传递超时(time-out)信息</span><br><span class="line">        • 返回值     发生错误时返回<span class="number">-1</span>，超时返回时返回<span class="number">0</span>。因发生关注的事件返回时，返回大于<span class="number">0</span>的值，该值是发生事件的文件描述符数。</span><br><span class="line"></span><br><span class="line">fd_set: 是一个<span class="type">long</span>类型的数组</span><br></pre></td></tr></table></figure>

<blockquote>
<p>​		第一，文件描述符的监视范围与select函数的第一个参数有关。实际上，select函数要求通过第一个参数传递监视对象文件描述符的数量。因此，需要得到注册在fd_set变量中的文件描述符数。但每次新建文件描述符时，其值都会增1，故只需将最大的文件描述符值加1再传递到select函数即可。加1是因为文件描述符的值从0开始。<br>​		二，select函数的超时时间与select函数的最后一个参数有关，其中timeval结构体定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">long</span> tv_sec; 	<span class="comment">// seconds</span></span><br><span class="line">    <span class="type">long</span> tv_usec;	<span class="comment">// microseconds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本来select函数只有在监视的文件描述符发生变化时才返回。如果未发生变化，就会进入阻塞状态。指定超时时间就是为了防止这种情况的发生。通过声明上述结构体变量，将秒数填入tv_sec成员,将毫秒数填人tv_usec成员,然后将结构体的地址值传递到select函数的最后一个参数此时，即使文件描述符中未发生变化，只要过了指定时间，也可以从函数中返回。不过这种情况下，select函数返回0。因此，可以通过返回值了解返回原因。如果不想设置超时，则传递NULL参数。</p>
</blockquote>
<h5 id="调用-select-函数后查看结果"><a href="#调用-select-函数后查看结果" class="headerlink" title="调用 select 函数后查看结果"></a>调用 select 函数后查看结果</h5><p>​		如果返回大于0的整数，说明相应数量的文件描述符发生变化。</p>
<p>​		文件描述符变化是指：监视的文件描述符中发生了相应的监视事件。例如：通过select的第二个参数传递的集合中存在需要读取的描述符时，就意味着文件描述符发生了变化。</p>
<p><img src="/../picture/IO%E5%A4%8D%E7%94%A8/image-20240724230343963.png" alt="image-20240724230343963"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		select函数调用完成后，向其传递的fd_set变量中将发生变化。原来为1的所有位均变为0，但发生变化的文件描述符对应位除外。因此，可以认为值仍为1的位置上的文件描述符发生了变化。</p>
<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd_set reads, temps;</span><br><span class="line">    <span class="type">int</span> result, str_len;</span><br><span class="line">    <span class="type">char</span> buf[BUFF_SIZE];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;reads);    <span class="comment">// 初始化变量</span></span><br><span class="line">    <span class="built_in">FD_SET</span>(<span class="number">0</span>, &amp;reads);  <span class="comment">// 将文件描述符0对应的位设置为1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// timeout.tv_sec = 5;     // 设置超时的秒数</span></span><br><span class="line">    <span class="comment">// timeout.tv_usec = 5000; // 设置超时的毫秒数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temps = reads; <span class="comment">// 先存一下</span></span><br><span class="line">        timeout.tv_sec = <span class="number">5</span>;</span><br><span class="line">        timeout.tv_usec = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果控制台输入数据，则返回大于0的数，没有就会超时</span></span><br><span class="line">        result = <span class="built_in">select</span>(<span class="number">1</span>, &amp;temps, <span class="number">0</span>, <span class="number">0</span>, &amp;timeout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;select error!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Time-out!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(<span class="number">0</span>, &amp;temps)) <span class="comment">// 验证发生变化的值是否是标准输入端</span></span><br><span class="line">            &#123;</span><br><span class="line">                str_len = <span class="built_in">read</span>(<span class="number">0</span>, buf, BUFF_SIZE);</span><br><span class="line">                buf[str_len] = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;message from colsole: %s&quot;</span>, buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter12# g++ select.cpp -o select</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter12# ./select </span><br><span class="line">This is a test</span><br><span class="line">message from colsole: This is a test</span><br><span class="line">Hi</span><br><span class="line">message from colsole: Hi</span><br><span class="line">Hello</span><br><span class="line">message from colsole: Hello</span><br><span class="line">Demo</span><br><span class="line">message from colsole: Demo</span><br><span class="line">Time-out!</span><br><span class="line">Time-out!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果超过5s不输入数据，将输出 Time-out!</span></span><br></pre></td></tr></table></figure>

<h5 id="实现-IO-复用服务端"><a href="#实现-IO-复用服务端" class="headerlink" title="实现 IO 复用服务端"></a>实现 IO 复用服务端</h5><blockquote>
<p>echo_selectserv.cpp</p>
</blockquote>
<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr, clnt_addr;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeout;</span><br><span class="line">    fd_set reads, copy_reads;</span><br><span class="line"></span><br><span class="line">    <span class="type">socklen_t</span> addr_sz;</span><br><span class="line">    <span class="type">int</span> fd_max, str_len, fd_num;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage %s &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">error_handling</span>(<span class="string">&quot;bind() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;listen() error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;reads);</span><br><span class="line">    <span class="built_in">FD_SET</span>(serv_sock, &amp;reads); <span class="comment">// 注册服务端套接字</span></span><br><span class="line">    fd_max = serv_sock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        copy_reads = reads;</span><br><span class="line">        timeout.tv_sec = <span class="number">5</span>;</span><br><span class="line">        timeout.tv_usec = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((fd_num = <span class="built_in">select</span>(fd_max + <span class="number">1</span>, &amp;copy_reads, <span class="number">0</span>, <span class="number">0</span>, &amp;timeout)) == <span class="number">-1</span>) <span class="comment">// 开始监视每次重新监听</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fd_num == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fd_max + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(i, &amp;copy_reads)) <span class="comment">// 查找发生变化的套接字文件描述符</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == serv_sock) <span class="comment">// 如果是服务端套接字时，受理连接请求</span></span><br><span class="line">                &#123;</span><br><span class="line">                    addr_sz = <span class="built_in">sizeof</span>(clnt_addr);</span><br><span class="line">                    clnt_sock = <span class="built_in">accept</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;clnt_addr, &amp;addr_sz);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">FD_SET</span>(clnt_sock, &amp;reads); <span class="comment">// 注册一个clnt_sock</span></span><br><span class="line">                    <span class="keyword">if</span> (fd_max &lt; clnt_sock)</span><br><span class="line">                    &#123;</span><br><span class="line">                        fd_max = clnt_sock;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Connected client: %d\n&quot;</span>, clnt_sock);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">// 不是服务端套接字时 </span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// i指的是当前发起请求的客户端</span></span><br><span class="line">                    str_len = <span class="built_in">read</span>(i, buff, BUFF_SIZE);</span><br><span class="line">                    <span class="keyword">if</span> (str_len == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">FD_CLR</span>(i, &amp;reads);</span><br><span class="line">                        <span class="built_in">close</span>(i);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;close client: %d\n&quot;</span>, i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">write</span>(i, buff, str_len);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter12# g++ echo_selectserv.cpp -o server </span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter12# ./server 9190</span><br><span class="line">Connected client: 4</span><br><span class="line">close client: 4</span><br></pre></td></tr></table></figure>

<blockquote>
<p>selectclient.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_routine</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> str_len = <span class="built_in">read</span>(sock, buf, BUFF_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (str_len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buf[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Message from server: %s&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_routine</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fgets</span>(buf, BUFF_SIZE, stdin);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(buf, <span class="string">&quot;q\n&quot;</span>) || !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;Q\n&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 向服务器传递EOF，因为fork函数复制了文件描述组，所以调用1次close不够</span></span><br><span class="line">            <span class="built_in">shutdown</span>(sock, SHUT_WR); </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">write</span>(sock, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;IP&gt; &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">2</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;connect() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_routine</span>(sock, buff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read_routine</span>(sock, buff);</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">close</span>(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter12# g++ echo_selectclient.cpp -o client</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter12# ./client 127.0.0.1 9190</span><br><span class="line">demo1</span><br><span class="line">Message from server: demo1</span><br><span class="line">demo2</span><br><span class="line">Message from server: demo2</span><br><span class="line">demo3</span><br><span class="line">Message from server: demo3</span><br><span class="line">demo4</span><br><span class="line">Message from server: demo4</span><br><span class="line">demo5</span><br><span class="line">Message from server: demo5</span><br><span class="line">demo6</span><br><span class="line">Message from server: demo6</span><br><span class="line">q</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>git的基本操作</title>
    <url>/2024/07/15/git/</url>
    <content><![CDATA[<p><img src="/../picture/git/timg.jpg" alt="img"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="1-git介绍"><a href="#1-git介绍" class="headerlink" title="1. git介绍"></a>1. git介绍</h1><h2 id="1-1-版本控制系统"><a href="#1-1-版本控制系统" class="headerlink" title="1.1. 版本控制系统"></a>1.1. 版本控制系统</h2><ul>
<li><p>集中式版本控制系统</p>
<blockquote>
<p>集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p>
<p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，那就GG了.  </p>
</blockquote>
<p><img src="/../picture/git/0.jpg"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>分布式版本控制系统</p>
<blockquote>
<p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。</p>
<p>既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？</p>
<p>分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
</blockquote>
<p><img src="/../picture/git/0-1559747872796.jpg" alt="distributed-repo"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<h1 id="2-创建本地版本库"><a href="#2-创建本地版本库" class="headerlink" title="2. 创建本地版本库"></a>2. 创建本地版本库</h1><blockquote>
<p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
</blockquote>
<h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><ul>
<li><p>工作区</p>
<ul>
<li>用户自己创建的目录 -&gt; 存放源代码</li>
<li>本地的版本库也需要放到工作区中</li>
<li>每个工作区中都可以创建一个版本库</li>
<li>只有工作区的<code>新文件</code>才需要添加到暂存区</li>
</ul>
</li>
<li><p>版本库</p>
<ul>
<li>就是一个目录: 名字-&gt; .git</li>
<li>管理用于提交的代码</li>
</ul>
</li>
<li><p>暂存区</p>
<ul>
<li>首先创建新文件 -&gt; 在工作区 (和版本库没有关系)</li>
<li>将新文件添加到本地仓库中 -&gt; 新文件被保存在了暂存区 (还是没有进行版本管理)</li>
<li>将暂存区数据提交到版本库 -&gt; 这时候就可以进行版本管理了</li>
<li>暂存区也是一个目录: stage&#x2F;index</li>
</ul>
<p><img src="/../picture/git/0-1559749463798.jpg"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>提交代码的流程<ul>
<li>要在工作区中创建新文件</li>
<li>将工作区中的新文件添加到暂存区<ul>
<li>文件只需要往暂存区添加一次</li>
</ul>
</li>
<li>将暂存区数据提交到版本仓库<ul>
<li>版本仓库中有很多节点, 依次记录着我们提交的各个版本</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-2-操作步骤"><a href="#2-2-操作步骤" class="headerlink" title="2.2 操作步骤"></a>2.2 操作步骤</h2><ul>
<li><p>创建版本库</p>
<ul>
<li><p>在工作区中鼠标右键</p>
<p><img src="/../picture/git/1566526442145.png" alt="1566526442145"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566526474770.png" alt="1566526474770"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566526548563.png" alt="1566526548563"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
</li>
<li><p>添加新文件</p>
<ul>
<li><p>在工作区右键菜单</p>
<p><img src="/../picture/git/1566528567183.png" alt="1566528567183"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566528599191.png" alt="1566528599191"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<p><img src="/../picture/git/0-1559749617853.jpg" alt="git-stage"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>提交文件</p>
<ul>
<li><p>鼠标右键</p>
<p><img src="/../picture/git/1566528777385.png" alt="1566528777385"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566528858759.png" alt="1566528858759"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<p><img src="/../picture/git/0-1559749634079.jpg" alt="git-stage-after-commit"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<h1 id="3-修改文件"><a href="#3-修改文件" class="headerlink" title="3. 修改文件"></a>3. 修改文件</h1><ul>
<li><p>修改工作区文件</p>
<ul>
<li>修改完文件之后直接提交, 不需要再次添加到暂存区</li>
</ul>
</li>
<li><p>修改完之后 的数据需要提交到本地的版本仓库中</p>
</li>
<li><p>还原修改</p>
<ul>
<li>还原之后数据就不能再恢复了</li>
</ul>
<p><img src="/../picture/git/1566529272163.png" alt="1566529272163"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>查看修改历史</p>
<ul>
<li>比较当前查看的版本和上一个版本的区别</li>
<li>可以导出某一个需要的版本, 在当前版本上鼠标右键:<ul>
<li><img src="/../picture/git/1566530146255.png" alt="1566530146255"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
</li>
<li><img src="/../picture/git/1566529629315.png" alt="1566529629315"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
</li>
<li><p>差异比较</p>
<p><img src="/../picture/git/1566530323067.png" alt="1566530323067"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>删除文件</p>
<ul>
<li>可以手动删除 -&gt; delete 键</li>
</ul>
</li>
<li><p>通过菜单项删除</p>
</li>
</ul>
<p><img src="/../picture/git/1566530793162.png" alt="1566530793162"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>注意事项:<code>删除操作之后必须要提交</code></li>
</ul>
<h1 id="4-练习-添加一个本地项目到仓库"><a href="#4-练习-添加一个本地项目到仓库" class="headerlink" title="4. 练习: 添加一个本地项目到仓库"></a>4. 练习: 添加一个本地项目到仓库</h1><ul>
<li><p>设置文件忽略</p>
<p>先选中要忽略的文件, 在这些文件上鼠标右键</p>
<p><img src="/../picture/git/1566532396837.png" alt="1566532396837"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>将设置忽略的动作提交到版本库</p>
</li>
</ul>
<h1 id="5-添加远程仓库"><a href="#5-添加远程仓库" class="headerlink" title="5. 添加远程仓库"></a>5. 添加远程仓库</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">远程仓库作用:</span><br><span class="line">	- 备份本地仓库的代码</span><br><span class="line">	- 多人协同开发, 使用远程仓库合并代码</span><br><span class="line">远程仓库来源:</span><br><span class="line">	- 公司自己搭建</span><br><span class="line">	- 使用现有的远程仓库</span><br><span class="line">		- github</span><br><span class="line">		- 码云</span><br></pre></td></tr></table></figure>



<h2 id="5-1-添加远程仓库"><a href="#5-1-添加远程仓库" class="headerlink" title="5.1 添加远程仓库"></a>5.1 添加远程仓库</h2><p>在线代码托管平台 </p>
<ul>
<li>Github: <a href="https://github.com/">https://github.com/</a></li>
<li>码云: <a href="https://gitee.com/">https://gitee.com/</a></li>
</ul>
<p>创建仓库</p>
<ul>
<li><img src="/../picture/git/1566533262064.png" alt="1566533262064"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li><img src="/../picture/git/1566533665064.png" alt="1566533665064"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li><img src="/../picture/git/1566533830369.png" alt="1566533830369"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
<h2 id="5-2-本地仓库同步到远程仓库"><a href="#5-2-本地仓库同步到远程仓库" class="headerlink" title="5.2 本地仓库同步到远程仓库"></a>5.2 本地仓库同步到远程仓库</h2><ul>
<li><p>在工作区鼠标右键</p>
<p><img src="/../picture/git/1566533947636.png" alt="1566533947636"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566534031304.png" alt="1566534031304"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<h2 id="5-3-克隆远程仓库到本地"><a href="#5-3-克隆远程仓库到本地" class="headerlink" title="5.3 克隆远程仓库到本地"></a>5.3 克隆远程仓库到本地</h2><ul>
<li><p>进入到远程仓库中, 找到仓库的地址</p>
<p><img src="/../picture/git/1566544062217.png" alt="1566544062217"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>将远程地址复制一份</p>
</li>
<li><p>在本地找一个目录, 进行如下操作</p>
<p><img src="/../picture/git/1566544121584.png" alt="1566544121584"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566544205499.png" alt="1566544205499"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>第一次需要将远程仓库内容下载到本地的时候, 才需要克隆</p>
</li>
</ul>
<h2 id="5-4-ssh设置"><a href="#5-4-ssh设置" class="headerlink" title="5.4 ssh设置"></a>5.4 ssh设置</h2><ul>
<li><p>在本地生成一个密钥对</p>
<ul>
<li><p>在本地任意目录下, 鼠标右键</p>
<p><img src="/../picture/git/1566544673757.png" alt="1566544673757"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>

<p><img src="/../picture/git/1566545000704.png" alt="1566545000704"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>本地设置ssh秘钥 -&gt; 私钥</p>
<p><img src="/../picture/git/1566545268559.png" alt="1566545268559"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566545557150.png" alt="1566545557150"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
</li>
<li><p>远程仓库设置公钥</p>
<ul>
<li><p>进入当前用户的设置界面</p>
<p><img src="/../picture/git/1566545689936.png" alt="1566545689936"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566545737164.png" alt="1566545737164"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566545824011.png" alt="1566545824011"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>使用ssh地址遇到的问题</p>
<p><img src="/../picture/git/1566546069055.png" alt="1566546069055"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解决方案: 需要修改tortoisegit 使用的 ssh工具</span><br><span class="line"># 需要在 tortoisegit 设置窗口中进行修改</span><br></pre></td></tr></table></figure>

<ul>
<li><p>默认的路径</p>
<p><img src="/../picture/git/1566546228805.png" alt="1566546228805"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>修改后的路径</p>
<p><img src="/../picture/git/1566546372033.png" alt="1566546372033"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="6-分支管理"><a href="#6-分支管理" class="headerlink" title="6. 分支管理"></a>6. 分支管理</h1><blockquote>
<p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>
<p>在版本仓库中有一个默认的分支:<code> master</code>, 当前仓库中有文件之后, 默认分支就被创建了</p>
<p>​	- 如果不创建分支, 分支默认只有一个 : master</p>
</blockquote>
<p><img src="/../picture/git/0.png" alt="learn-branches"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="6-1-创建分支"><a href="#6-1-创建分支" class="headerlink" title="6.1 创建分支"></a>6.1 创建分支</h2><p><img src="/../picture/git/1566547011380.png" alt="1566547011380"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566547074035.png" alt="1566547074035"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="6-2-切换分支"><a href="#6-2-切换分支" class="headerlink" title="6.2 切换分支"></a>6.2 切换分支</h2><p><img src="/../picture/git/1566547131012.png" alt="1566547131012"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566547316804.png" alt="1566547316804"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="6-3-合并分支"><a href="#6-3-合并分支" class="headerlink" title="6.3 合并分支"></a>6.3 合并分支</h2><blockquote>
<p>两个分支进行合并(master, new分支), 最终要合并到那个分支(master), 就先切换到那个分支(master), 切换完成之后, 在选择把哪个分支(new分支)合并到当前分支(master)</p>
</blockquote>
<p><img src="/../picture/git/1566548777614.png" alt="1566548777614"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566548823482.png" alt="1566548823482"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="6-4-解决冲突"><a href="#6-4-解决冲突" class="headerlink" title="6.4 解决冲突"></a>6.4 解决冲突</h2><p><img src="/../picture/git/1566549020854.png" alt="1566549020854"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566549064722.png" alt="1566549064722"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>冲突文件的格式</p>
<p><img src="/../picture/git/1566549230042.png" alt="1566549230042"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>手动修改文件内容, 修改完成之后, 解决冲突</p>
<p><img src="/../picture/git/1566549336456.png" alt="1566549336456"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566549405908.png" alt="1566549405908"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566549482138.png" alt="1566549482138"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<h1 id="7-推送文件"><a href="#7-推送文件" class="headerlink" title="7. 推送文件"></a>7. 推送文件</h1><blockquote>
<p>有一个远程的仓库-&gt; github, 这不是一个空的仓库, 需要将本地的版本库提交到远程仓库</p>
</blockquote>
<p>直接推送 -&gt; 失败</p>
<p><img src="/../picture/git/1566549817839.png" alt="1566549817839"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>失败的原因:</p>
<ul>
<li>远程仓库不是空的<ul>
<li>有一个默认分支, <code>master</code></li>
</ul>
</li>
<li>本地仓库, 不是空的<ul>
<li>有一个默认分支, <code>master</code></li>
</ul>
</li>
<li>远程仓库和本地仓库默认分支名字相同, 但是这两个分支没有任何关系<ul>
<li>没有关系的分支进行合并 -&gt; 失败</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p>解决方案</p>
<blockquote>
<ol>
<li>将远程仓库拉取到本地(pull)<ul>
<li>拉取: 直接将远程仓库分支中的信息和本地分支进行合并</li>
<li>获取: 将远程仓库分支复制到本地的另外一个分支中, 不会合并<ul>
<li>分支名字: fetch_head</li>
</ul>
</li>
</ul>
</li>
<li>将两个分支进行强行合并</li>
<li>将本地分支数据推送动到远程仓库</li>
</ol>
</blockquote>
</li>
<li><p>通过进行获取操作, 得到新分支<code>FETCH_HEAD</code></p>
</li>
</ul>
<p><img src="/../picture/git/1566550553280.png" alt="1566550553280"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>合并分支: 得到的新分支<code>FETCH_HEAD</code>分支合并到本地<code>master</code>分支</li>
</ul>
<p><img src="/../picture/git/1566550645559.png" alt="1566550645559"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/git/1566550709001.png" alt="1566550709001"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>将本地仓库推动到远程仓库</li>
</ul>
<p><img src="/../picture/git/1566550772679.png" alt="1566550772679"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="8-使用最多的场景"><a href="#8-使用最多的场景" class="headerlink" title="8. 使用最多的场景"></a>8. 使用最多的场景</h1><blockquote>
<p>远程仓库分支和本地仓库分支有关系的情况, 该如何操作?</p>
<ul>
<li>本地:<ul>
<li>修改代码提交到本地仓库</li>
<li>提交到远程仓库<ul>
<li>不能直接提交</li>
<li>在推送之前应该将远程仓库代码<code>拉取</code>到本地<ul>
<li>进程代码合并<ul>
<li>有可能冲突 -&gt; 手动解决冲突</li>
</ul>
</li>
</ul>
</li>
<li>将新的代码推动到远程仓库</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>多种 I/O 函数</title>
    <url>/2024/08/04/chapter13%E5%A4%9A%E7%A7%8DIO%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="多种-I-O-函数"><a href="#多种-I-O-函数" class="headerlink" title="多种 I&#x2F;O 函数"></a>多种 I&#x2F;O 函数</h1><h2 id="1-1-send-recv-函数"><a href="#1-1-send-recv-函数" class="headerlink" title="1.1 send &amp; recv 函数"></a>1.1 send &amp; recv 函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">send</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span>* buf, <span class="type">size_t</span> nbytes, <span class="type">int</span> flags)</span></span>;</span><br><span class="line">	-&gt; 成功时返回返回的字节数，失败时返回<span class="number">-1</span></span><br><span class="line">        • sockfd	表示与数据传输对象的连接的套接字文件描述符</span><br><span class="line">        • buf		保存待传输数据的缓冲地址值</span><br><span class="line">        • nbytes	待传输的字节数</span><br><span class="line">        • flags	    传输数据时指定的可选项信息</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span>* buf, <span class="type">size_t</span> nbytes, <span class="type">int</span> flags)</span></span>;</span><br><span class="line">	-&gt; 成功时返回接受的字节数(收到 EOF 时返回<span class="number">0</span>)，失败时返回<span class="number">-1</span></span><br><span class="line">        • sockfd	表示与数据接受对象的连接的套接字文件描述符</span><br><span class="line">        • buf		保存待接受数据的缓冲地址值</span><br><span class="line">        • nbytes     可接收的最大字节数</span><br><span class="line">        • flags		 接收数据时指定的可选项信息</span><br></pre></td></tr></table></figure>

<p>send 函数和 recv 函数的最后一个参数可以使用位或运算(|运算符)同时传递多个参数信息：</p>
<table>
<thead>
<tr>
<th>可选项(Option)</th>
<th>含义</th>
<th>send</th>
<th>recv</th>
</tr>
</thead>
<tbody><tr>
<td>MSG_OOB</td>
<td>用于传输带外数据(out-of-band data)</td>
<td>•</td>
<td>•</td>
</tr>
<tr>
<td>MSG_PEEK</td>
<td>验证输入缓冲区是否存在接收的数据</td>
<td></td>
<td>•</td>
</tr>
<tr>
<td>MSG_DONTROUTE</td>
<td>数据传输过程中不参照路由(Routing)表,在本地(Local)网络中寻找目的地</td>
<td>•</td>
<td></td>
</tr>
<tr>
<td>MSG_DONTWAIT</td>
<td>调用 I&#x2F;O 函数时不阻塞,用于使用非阻塞(Non-blocking) I&#x2F;O</td>
<td>•</td>
<td>•</td>
</tr>
<tr>
<td>MSG_WAITALL</td>
<td>防止函数返回，直到接收全部请求的字节数</td>
<td></td>
<td>•</td>
</tr>
</tbody></table>
<h3 id="1-1-1-MSG-OOB-发送紧急消息"><a href="#1-1-1-MSG-OOB-发送紧急消息" class="headerlink" title="1.1.1 MSG_OOB 发送紧急消息"></a>1.1.1 MSG_OOB 发送紧急消息</h3><p><strong>MSG_OOB可选项就用于创建特殊发送方法和通道以发送紧急消息</strong></p>
<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>oob_recv.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> acpt_sock;</span><br><span class="line"><span class="type">int</span> recv_sock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">urg_handler</span><span class="params">(<span class="type">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> str_len;</span><br><span class="line">    <span class="type">char</span> buf[BUFF_SIZE];</span><br><span class="line">    str_len = <span class="built_in">recv</span>(recv_sock, buf, <span class="built_in">sizeof</span>(buf) - <span class="number">1</span>, MSG_OOB);</span><br><span class="line">    buf[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Urgent message: %s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> recv_addr, serv_addr;</span><br><span class="line">    <span class="type">int</span> str_len, state;</span><br><span class="line">    <span class="type">socklen_t</span> serv_addr_sz;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> act;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    act.sa_handler = urg_handler;</span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    acpt_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;recv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(recv_addr));</span><br><span class="line">    recv_addr.sin_family = AF_INET;</span><br><span class="line">    recv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    recv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(acpt_sock, (<span class="keyword">struct</span> sockaddr*)&amp;recv_addr, <span class="built_in">sizeof</span>(recv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;bind() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">listen</span>(acpt_sock, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    serv_addr_sz = <span class="built_in">sizeof</span>(serv_addr);</span><br><span class="line">    recv_sock = <span class="built_in">accept</span>(acpt_sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, &amp;serv_addr_sz);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fcntl</span>(recv_sock, F_SETOWN, <span class="built_in">getpid</span>());</span><br><span class="line">    <span class="comment">// 处理MSG_OOB紧急消息</span></span><br><span class="line">    state = <span class="built_in">sigaction</span>(SIGURG, &amp;act, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((str_len = <span class="built_in">recv</span>(recv_sock, buff, <span class="built_in">sizeof</span>(buff) - <span class="number">1</span>, <span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str_len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(buff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(recv_sock);</span><br><span class="line">    <span class="built_in">close</span>(acpt_sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# g++ oob_recv.cpp -o recv</span><br><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# ./recv 9190</span><br><span class="line">123</span><br><span class="line">Urgent message: 4</span><br><span class="line">567</span><br><span class="line">Urgent message: 0</span><br><span class="line">89</span><br></pre></td></tr></table></figure>

<blockquote>
<p>oob_send.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> recv_addr;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;IP&gt; &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;recv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(recv_addr));</span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    recv_addr.sin_family = AF_INET;</span><br><span class="line">    recv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    recv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (<span class="keyword">struct</span> sockaddr*)&amp;recv_addr, <span class="built_in">sizeof</span>(recv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;connect() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">write</span>(sock, <span class="string">&quot;123&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    <span class="comment">// 紧急消息的传输 只需要指定 MSG_OOB</span></span><br><span class="line">    <span class="built_in">send</span>(sock, <span class="string">&quot;4&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;4&quot;</span>), MSG_OOB);</span><br><span class="line">    <span class="built_in">write</span>(sock, <span class="string">&quot;567&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;567&quot;</span>));</span><br><span class="line">    <span class="comment">// 紧急消息的传输 只需要指定 MSG_OOB</span></span><br><span class="line">    <span class="built_in">send</span>(sock, <span class="string">&quot;890&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;890&quot;</span>), MSG_OOB);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(sock);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# g++ oob_send.cpp -o oob</span><br><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# ./oob 127.0.0.1 9190</span><br></pre></td></tr></table></figure>

<p><font color=SpringGreen>通过MSG_OOB可选项传递数据时不会加快速度传输数据，而且通过信号处理函数urg_handler读取数据时只能读取一个字节。剩余数据只能通过MSG_OOB可选项的普通输入函数读取。这是因为TCP不存在真正意义上的“带外数据”。实际上，MSG_OOB中的OOB指的是Out-of-band，而带外数据的含义是：“通过完全不同的通信路径传输的数据。”即真正意义上的Out-of-rand需要通过单独的通信路径告诉传输数据，但TCP不另外提供，只利用TCP的紧急模式(Urgent mode)进行传输。</font></p>
<h3 id="1-1-2-紧急模式工作原理"><a href="#1-1-2-紧急模式工作原理" class="headerlink" title="1.1.2 紧急模式工作原理"></a>1.1.2 紧急模式工作原理</h3><p><font color=Chocolate>MSG_OOB真正的意义在于督促数据接收对象尽快处理数据。这是紧急模式的全部内容，而且TCP“保持传输顺序”的特性仍然成立。</font></p>
<p><img src="/../picture/assets/image-20240804142528425.png" alt="image-20240804142528425"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">send</span>(sock, <span class="string">&quot;890&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;890&quot;</span>), MSG_OOB);</span><br></pre></td></tr></table></figure>

<p>​		如果将缓冲区最左侧端的位置视为偏移量0，字符0保存于偏移量为2的位置。另外，字符0右侧偏移量为3的位置存有紧急指针(Urgent Pointer)。紧急指针指向紧急消息的下一个位置（偏移量+1），同时向对方主机传递如下消息：</p>
<center>“紧急指针指向的偏移量为3之前的部分就是紧急消息”</center>

<p>​		也就是说，实际上只用了一个字节表示紧急消息。</p>
<p><img src="/../picture/assets/image-20240804142938172.png" alt="image-20240804142938172"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>TCP包实际包含更多消息(这里只是列举主题相关的)</p>
<ul>
<li><input disabled="" type="checkbox"> URG&#x3D;1： 载有紧急消息的数据包</li>
<li><input disabled="" type="checkbox"> URG指针： 紧急指针位于便宜量为3的位置</li>
</ul>
<p>​		指定MSG_OOB选项的数据包本身就是紧急数据包，并通过紧急指针表示紧急消息所在位置。但是通过图13-2无法得到：</p>
<center>“紧急消息是字符串890？还是90？还是单个字符0？”</center>

<p><font color=red>除紧急指针的前面1个字节外，数据接收方将通过调用常用输入函数读取剩余部分。换言之，紧急消息的意义在于督促消息处理，而非紧急传输受限的消息。</font></p>
<p>补充：</p>
<p><em><strong>计算机领域中的偏移量(offset):</strong></em></p>
<p><img src="/../picture/assets/image-20240804200023450.png" alt="image-20240804200023450"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<center>偏移量表示距离基准点向哪个方向偏移多长距离，偏移地址每次从0开始。</center>



<h3 id="1-1-3-检查输入缓冲"><a href="#1-1-3-检查输入缓冲" class="headerlink" title="1.1.3 检查输入缓冲"></a>1.1.3 检查输入缓冲</h3><p>​		同时设置MSG_PEEK选项和MSG_DONTWAIT选项，以验证输入缓冲区中是否存在接收的数据。设置MSG_PEEK选并调用recv函数时，即使读取了缓冲区的数据也不会删除。因此该选项通常与MSG_DONTWAIT合作，用于调用以非阻塞方式验证待读取数据存在与否的函数。</p>
<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>peek_recv.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> acpt_sock, recv_sock;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> acpt_addr, recv_addr;</span><br><span class="line">    <span class="type">int</span> str_len, state;</span><br><span class="line">    <span class="type">socklen_t</span> recv_addr_sz;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acpt_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;acpt_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(acpt_addr));</span><br><span class="line">    acpt_addr.sin_family = AF_INET;</span><br><span class="line">    acpt_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    acpt_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(acpt_sock, (<span class="keyword">struct</span> sockaddr*)&amp;acpt_addr, <span class="built_in">sizeof</span>(acpt_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;bind() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">listen</span>(acpt_sock, <span class="number">5</span>);</span><br><span class="line">    recv_addr_sz = <span class="built_in">sizeof</span>(recv_addr);</span><br><span class="line">    recv_sock = <span class="built_in">accept</span>(acpt_sock, (<span class="keyword">struct</span> sockaddr*)&amp;recv_addr, &amp;recv_addr_sz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str_len = <span class="built_in">recv</span>(recv_sock, buff, <span class="built_in">sizeof</span>(buff) - <span class="number">1</span>, MSG_PEEK | MSG_DONTWAIT);</span><br><span class="line">        <span class="keyword">if</span> (str_len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buff[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Buffering %d bytes: %s\n&quot;</span>, str_len, buff);</span><br><span class="line"></span><br><span class="line">    str_len = <span class="built_in">recv</span>(recv_sock, buff, <span class="built_in">sizeof</span>(buff) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    buff[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Read again: %s\n&quot;</span>, buff);</span><br><span class="line">    <span class="built_in">close</span>(acpt_sock);</span><br><span class="line">    <span class="built_in">close</span>(recv_sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# g++ peek_recv.cpp -o recv</span><br><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# ./recv 9190</span><br><span class="line">Buffering 3 bytes: 123</span><br><span class="line">Read again: 123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>peek_send.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> send_addr;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;IP&gt; &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;send_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(send_addr));</span><br><span class="line">    send_addr.sin_family = AF_INET;</span><br><span class="line">    send_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    send_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (<span class="keyword">struct</span> sockaddr*)&amp;send_addr, <span class="built_in">sizeof</span>(send_addr)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;connect() error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">write</span>(sock, <span class="string">&quot;123&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    <span class="built_in">close</span>(sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@glk:/home/jarryli/tcp_ip/chapter13# g++ peek_send.cpp -o send</span><br><span class="line">root@glk:/home/jarryli/tcp_ip/chapter13# ./send 127.0.0.1 9190</span><br></pre></td></tr></table></figure>

<p><font color=Turquoise2>仅发送1次数据却被读取了2次，因为第1次调用recv函数时设置了MSG_PEEK可选项。</font></p>
<h2 id="1-2-readv-writev-函数"><a href="#1-2-readv-writev-函数" class="headerlink" title="1.2 readv &amp; writev 函数"></a>1.2 readv &amp; writev 函数</h2><p>​		readv &amp; writev 函数的功能：对数据进行整合传输及发送的函数。</p>
<p>也就是说，通过 writev 函数可以将分散保存在多个缓冲区中的数据一并发送，通过 readv 函数可以有多个缓冲区分别接收；适当使用这2个函数可以减少 I&#x2F;O 函数的调用次数。</p>
<h3 id="1-2-1-writev-函数"><a href="#1-2-1-writev-函数" class="headerlink" title="1.2.1 writev 函数"></a>1.2.1 writev 函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">writev</span><span class="params">(<span class="type">int</span> filedes, <span class="type">const</span> <span class="keyword">struct</span> iovec* iov, <span class="type">int</span> iovcnt)</span></span>;</span><br><span class="line">	-&gt; 成功时返回发送的字节数，失败时返回<span class="number">-1</span></span><br><span class="line">        • filedes: 表示数据传输对象的套接字文件描述符。但该函数并不只限于套接字，因此可以像read函数一样向其传递文件或标准输出描述符</span><br><span class="line">        • iov: iovec结构体数组的地址值，结构体iovec中包含待发送数据的位置和信息大小</span><br><span class="line">        • iovcnt: 向第二个参数传递的数组长度</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体 iovec</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iovec</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* iov_base;	<span class="comment">// 缓冲地址</span></span><br><span class="line">    <span class="type">size_t</span> iov_len; <span class="comment">// 缓冲大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/../picture/assets/image-20240804221831486.png" alt="image-20240804221831486"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">iovec</span> vec[<span class="number">2</span>];</span><br><span class="line">    <span class="type">char</span> buf1[] = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf2[] = <span class="string">&quot;1234567&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> str_len;</span><br><span class="line">    <span class="comment">// 缓冲区的基地址</span></span><br><span class="line">    vec[<span class="number">0</span>].iov_base = buf1;</span><br><span class="line">    <span class="comment">// 缓冲区的长度</span></span><br><span class="line">    vec[<span class="number">0</span>].iov_len = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    vec[<span class="number">1</span>].iov_base = buf2;</span><br><span class="line">    vec[<span class="number">1</span>].iov_len = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    str_len = <span class="built_in">writev</span>(<span class="number">1</span>, vec, <span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Write bytes: %d\n&quot;</span>, str_len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# g++ writev.cpp -o writev</span><br><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# ./writev </span><br><span class="line">ABC123</span><br><span class="line">Write bytes: 6</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-readv-函数"><a href="#1-2-2-readv-函数" class="headerlink" title="1.2.2 readv 函数"></a>1.2.2 readv 函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">readv</span><span class="params">(<span class="type">int</span> filedes, <span class="type">const</span> <span class="keyword">struct</span> iovec* iov, <span class="type">int</span> iovcnt)</span></span>;</span><br><span class="line">	-&gt; 成功时返回发送的字节数，失败时返回<span class="number">-1</span></span><br><span class="line">        • filedes: 传递接收数据的文件(或套接字)描述符</span><br><span class="line">        • iov: 包含数据保存位置和大小信息的iovec结构体数据的地址值</span><br><span class="line">        • iovcnt: 向第二个参数传递的数组长度</span><br></pre></td></tr></table></figure>

<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">iovec</span> vec[<span class="number">2</span>];</span><br><span class="line">    <span class="type">char</span> buf1[BUFF_SIZE] = &#123;<span class="number">0</span>, &#125;;</span><br><span class="line">    <span class="type">char</span> buf2[BUFF_SIZE] = &#123;<span class="number">0</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> str_len;</span><br><span class="line">    vec[<span class="number">0</span>].iov_base = buf1;</span><br><span class="line">    vec[<span class="number">0</span>].iov_len = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    vec[<span class="number">1</span>].iov_base = buf2;</span><br><span class="line">    vec[<span class="number">1</span>].iov_len = BUFF_SIZE;</span><br><span class="line">    </span><br><span class="line">    str_len = <span class="built_in">readv</span>(<span class="number">0</span>, vec, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Read bytes: %d\n&quot;</span>, str_len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First message: %s\n&quot;</span>, buf1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Second message: %s\n&quot;</span>, buf2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# g++ readv.cpp -o readv</span><br><span class="line">root@jarryli:/home/jarryli/tcp_ip/chapter13# ./readv </span><br><span class="line">I like TCP/IP socket programming~</span><br><span class="line">Read bytes: 34</span><br><span class="line">First message: I lik</span><br><span class="line">Second message: e TCP/IP socket programming~</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>libmodbus库的使用</title>
    <url>/2024/08/14/libmodbus%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="libmodbus库使用"><a href="#libmodbus库使用" class="headerlink" title="libmodbus库使用"></a>libmodbus库使用</h1><h2 id="1-测试使用1"><a href="#1-测试使用1" class="headerlink" title="1. 测试使用1"></a>1. 测试使用1</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modbus.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;modbus.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建modbus主设备(参数: 主机端口、波特率、校验、数据位、停滞位)</span></span><br><span class="line">    <span class="type">modbus_t</span>* mb = <span class="built_in">modbus_new_rtu</span>(<span class="string">&quot;com1&quot;</span>, <span class="number">9600</span>, <span class="string">&#x27;N&#x27;</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">modbus_connect</span>(mb); <span class="comment">// 连接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择modbus从站的地址</span></span><br><span class="line">    <span class="built_in">modbus_set_slave</span>(mb, <span class="number">1</span>); <span class="comment">// 从站地址为1的modbus</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> regs[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 读(参数: modbus设备、起始地址、寄存器数目、放到哪)</span></span><br><span class="line">    <span class="built_in">modbus_read_registers</span>(mb, <span class="number">80</span>, <span class="number">4</span>, regs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭释放资源</span></span><br><span class="line">    <span class="built_in">modbus_close</span>(mb);</span><br><span class="line">    <span class="built_in">modbus_free</span>(mb);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, regs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240814101032119.png" alt="image-20240814101032119"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="2-测试使用2"><a href="#2-测试使用2" class="headerlink" title="2. 测试使用2"></a>2. 测试使用2</h2><blockquote>
<p>MainWindow.h</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;modbus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonWriteCoil_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadCoil_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonWriteCoils_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadCoils_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadInputStatus_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadInputStatuses_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonWriteHoldRegister_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadHoldRegister_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonWriteHoldRegisters_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadHoldRegisters_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadInputRegister_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pushButtonReadInputRegisters_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line"></span><br><span class="line">    <span class="type">modbus_t</span>* mb;</span><br><span class="line">    QLabel* labelStatus;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MainWindow.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// modbus从设备地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLAVE_ADDR  15</span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    labelStatus = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;Modbus开发实例&quot;</span>);</span><br><span class="line">    labelStatus-&gt;<span class="built_in">setMinimumWidth</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">statusBar</span>()-&gt;<span class="built_in">addWidget</span>(labelStatus);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建modbus主设备</span></span><br><span class="line">    mb = <span class="built_in">modbus_new_rtu</span>(<span class="string">&quot;com1&quot;</span>, <span class="number">19200</span>, <span class="string">&#x27;N&#x27;</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 指定对应的modbus从设备</span></span><br><span class="line">    <span class="built_in">modbus_set_slave</span>(mb, SLAVE_ADDR);</span><br><span class="line">    <span class="comment">// 连接modbus设备</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">modbus_connect</span>(mb) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Connect modbus failed: &quot;</span> &lt;&lt; <span class="built_in">modbus_strerror</span>(errno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonWriteCoil_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxAddrWriteCoil-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> value = ui-&gt;spinBoxValueWriteCoil-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_write_bit</span>(mb, addr, value);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;写失败&quot;</span>, <span class="string">&quot;写线圈状态寄存器失败,地址: &quot;</span> + QString::<span class="built_in">number</span>(addr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;写线圈状态寄存器成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadCoil_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxAddrReadCoil-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint8_t</span> value;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_bits</span>(mb, addr, <span class="number">1</span>, &amp;value);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读线圈状态寄存器失败,地址: &quot;</span> + QString::<span class="built_in">number</span>(addr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读线圈状态寄存器成功&quot;</span>);</span><br><span class="line">        ui-&gt;spinBoxValueReadCoil-&gt;<span class="built_in">setValue</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonWriteCoils_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxStartAddrWriteCoils-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="comment">// 使用正则表达式</span></span><br><span class="line">    QString str = ui-&gt;plainTextEditWriteCoils-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line">    QRegExp separator = <span class="built_in">QRegExp</span>(<span class="string">&quot;\t|\n|\r\n|,| |;&quot;</span>);</span><br><span class="line">    QStringList list = str.<span class="built_in">split</span>(separator, QString::SkipEmptyParts);</span><br><span class="line">    <span class="type">uint8_t</span>* value = <span class="keyword">new</span> <span class="type">uint8_t</span>[list.<span class="built_in">count</span>()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">count</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        value[i] = list[i].<span class="built_in">toInt</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_write_bits</span>(mb, addr, list.<span class="built_in">count</span>(), value);</span><br><span class="line">    <span class="keyword">if</span> (ret != list.<span class="built_in">count</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;写失败&quot;</span>, <span class="string">&quot;读线圈状态寄存器失败,地址: &quot;</span>, QString::<span class="built_in">number</span>(addr) + QString::<span class="built_in">number</span>(list.<span class="built_in">count</span>()));</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;写线圈状态寄存器失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;写线圈状态寄存器成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> []value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadCoils_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxStartAddrReadCoils-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> count = ui-&gt;spinBoxReadCountCoils-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint8_t</span>* values = <span class="keyword">new</span> <span class="type">uint8_t</span>[count];</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_bits</span>(mb, addr, count, values);</span><br><span class="line">    <span class="keyword">if</span> (ret != count)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读线圈状态寄存器失败,地址: &quot;</span>, QString::<span class="built_in">number</span>(addr));</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读线圈状态寄存器失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读线圈状态寄存器成功&quot;</span>);</span><br><span class="line">        QString str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += QString::<span class="built_in">number</span>(values[i]) + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ui-&gt;plainTextEditReadCoils-&gt;<span class="built_in">setPlainText</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadInputStatus_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxAddrReadInputStatus-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint8_t</span> value;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_input_bits</span>(mb, addr, <span class="number">1</span>, &amp;value);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读离散状态寄存器失败,地址: &quot;</span> + QString::<span class="built_in">number</span>(addr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读离散状态寄存器成功&quot;</span>);</span><br><span class="line">        ui-&gt;spinBoxValueReadInputStatus-&gt;<span class="built_in">setValue</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadInputStatuses_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxStartAddrReadInputStatuses-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> count = ui-&gt;spinBoxReadInputStatusesCount-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint8_t</span>* values = <span class="keyword">new</span> <span class="type">uint8_t</span>[count];</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_input_bits</span>(mb, addr, count, values);</span><br><span class="line">    <span class="keyword">if</span> (ret != count)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读离散输入状态寄存器失败,地址: &quot;</span>, QString::<span class="built_in">number</span>(addr));</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读离散输入状态寄存器失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读离散输入状态寄存器成功&quot;</span>);</span><br><span class="line">        QString str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += QString::<span class="built_in">number</span>(values[i]) + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ui-&gt;plainTextEditReadInputStatus-&gt;<span class="built_in">setPlainText</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonWriteHoldRegister_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxAddrHoldRegister-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> value = ui-&gt;spinBoxValueWriteHoldRegister-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_write_register</span>(mb, addr, value);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;写失败&quot;</span>, <span class="string">&quot;写保持寄存器失败,地址: &quot;</span> + QString::<span class="built_in">number</span>(addr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;写保持寄存器成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadHoldRegister_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxAddrReadHoldRegister-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint16_t</span> value;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_registers</span>(mb, addr, <span class="number">1</span>, &amp;value);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读保持寄存器失败,地址: &quot;</span> + QString::<span class="built_in">number</span>(addr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读保持状态寄存器成功&quot;</span>);</span><br><span class="line">        ui-&gt;spinBoxValueReadHoldRegister-&gt;<span class="built_in">setValue</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonWriteHoldRegisters_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxStartAddrWriteHoldRegister-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="comment">// 使用正则表达式</span></span><br><span class="line">    QString str = ui-&gt;plainTextEditWriteHoldRegisters-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line">    QRegExp separator = <span class="built_in">QRegExp</span>(<span class="string">&quot;\t|\n|\r\n|,| |;&quot;</span>);</span><br><span class="line">    QStringList list = str.<span class="built_in">split</span>(separator, QString::SkipEmptyParts);</span><br><span class="line">    <span class="type">uint16_t</span>* value = <span class="keyword">new</span> <span class="type">uint16_t</span>[list.<span class="built_in">count</span>()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">count</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        value[i] = list[i].<span class="built_in">toInt</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_write_registers</span>(mb, addr, list.<span class="built_in">count</span>(), value);</span><br><span class="line">    <span class="keyword">if</span> (ret != list.<span class="built_in">count</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;写失败&quot;</span>, <span class="string">&quot;读保持寄存器失败,地址: &quot;</span>, QString::<span class="built_in">number</span>(addr) + QString::<span class="built_in">number</span>(list.<span class="built_in">count</span>()));</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;写保持寄存器失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;写保持寄存器成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> []value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadHoldRegisters_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxStartAddrReadHoldRegisters-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> count = ui-&gt;spinBoxReadHoldRegistersCount-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint16_t</span>* values = <span class="keyword">new</span> <span class="type">uint16_t</span>[count];</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_registers</span>(mb, addr, count, values);</span><br><span class="line">    <span class="keyword">if</span> (ret != count)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读保持寄存器失败,地址: &quot;</span>, QString::<span class="built_in">number</span>(addr));</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读保持寄存器失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读保持寄存器成功&quot;</span>);</span><br><span class="line">        QString str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += QString::<span class="built_in">number</span>(values[i]) + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ui-&gt;plainTextEditReadHoldRegisters-&gt;<span class="built_in">setPlainText</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadInputRegister_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxAddrReadInpiutInputRegister-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint16_t</span> value;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_input_registers</span>(mb, addr, <span class="number">1</span>, &amp;value);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读输入寄存器失败,地址: &quot;</span> + QString::<span class="built_in">number</span>(addr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读输入寄存器成功&quot;</span>);</span><br><span class="line">        ui-&gt;spinBoxValueReadInputRegister-&gt;<span class="built_in">setValue</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButtonReadInputRegisters_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> addr = ui-&gt;spinBoxStartAddrReadInputRegisters-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">int</span> count = ui-&gt;spinBoxReadInputRegistersCount-&gt;<span class="built_in">value</span>();</span><br><span class="line">    <span class="type">uint16_t</span>* values = <span class="keyword">new</span> <span class="type">uint16_t</span>[count];</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">modbus_read_input_registers</span>(mb, addr, count, values);</span><br><span class="line">    <span class="keyword">if</span> (ret != count)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;读失败&quot;</span>, <span class="string">&quot;读输入寄存器失败,地址: &quot;</span>, QString::<span class="built_in">number</span>(addr));</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读输入寄存器失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        labelStatus-&gt;<span class="built_in">setText</span>(<span class="string">&quot;读输入寄存器成功&quot;</span>);</span><br><span class="line">        QString str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += QString::<span class="built_in">number</span>(values[i]) + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ui-&gt;plainTextEditReadInputRegisters-&gt;<span class="built_in">setPlainText</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ui</p>
</blockquote>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240814100745428.png" alt="image-20240814100745428"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;ui version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">class</span>&gt;MainWindow&lt;/<span class="keyword">class</span>&gt;</span><br><span class="line"> &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMainWindow&quot;</span> name=<span class="string">&quot;MainWindow&quot;</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">   &lt;rect&gt;</span><br><span class="line">    &lt;x&gt;<span class="number">0</span>&lt;/x&gt;</span><br><span class="line">    &lt;y&gt;<span class="number">0</span>&lt;/y&gt;</span><br><span class="line">    &lt;width&gt;<span class="number">931</span>&lt;/width&gt;</span><br><span class="line">    &lt;height&gt;<span class="number">657</span>&lt;/height&gt;</span><br><span class="line">   &lt;/rect&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;windowTitle&quot;</span>&gt;</span><br><span class="line">   &lt;string&gt;MainWindow&lt;/string&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;centralwidget&quot;</span>&gt;</span><br><span class="line">   &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_9&quot;</span>&gt;</span><br><span class="line">    &lt;item&gt;</span><br><span class="line">     &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QTabWidget&quot;</span> name=<span class="string">&quot;tabWidget&quot;</span>&gt;</span><br><span class="line">      &lt;property name=<span class="string">&quot;currentIndex&quot;</span>&gt;</span><br><span class="line">       &lt;number&gt;<span class="number">0</span>&lt;/number&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;tab&quot;</span>&gt;</span><br><span class="line">       &lt;attribute name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;string&gt;线圈状态寄存器&lt;/string&gt;</span><br><span class="line">       &lt;/attribute&gt;</span><br><span class="line">       &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_8&quot;</span>&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_4&quot;</span>&gt;</span><br><span class="line">          &lt;item&gt;</span><br><span class="line">           &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">             &lt;string&gt;写单个寄存器&lt;/string&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_2&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonWriteCoil&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;WRITE&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;指定地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxAddrWriteCoil&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_2&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;数据:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxValueWriteCoil&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximum&quot;</span>&gt;</span><br><span class="line">                &lt;number&gt;<span class="number">1</span>&lt;/number&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/widget&gt;</span><br><span class="line">          &lt;/item&gt;</span><br><span class="line">          &lt;item&gt;</span><br><span class="line">           &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_2&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">             &lt;string&gt;读单个寄存器&lt;/string&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_3&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadCoil&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_3&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;指定地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxAddrReadCoil&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_4&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;数据:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxValueReadCoil&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximum&quot;</span>&gt;</span><br><span class="line">                &lt;number&gt;<span class="number">1</span>&lt;/number&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/widget&gt;</span><br><span class="line">          &lt;/item&gt;</span><br><span class="line">         &lt;/layout&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_3&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;写多个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_5&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonWriteCoils&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;WRITE&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_5&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;起始地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxStartAddrWriteCoils&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPlainTextEdit&quot;</span> name=<span class="string">&quot;plainTextEditWriteCoils&quot;</span>/&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_4&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;读多个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_2&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_6&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadCoils&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_6&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;起始地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxStartAddrReadCoils&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_7&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;寄存器个数:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxReadCountCoils&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPlainTextEdit&quot;</span> name=<span class="string">&quot;plainTextEditReadCoils&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">       &lt;/layout&gt;</span><br><span class="line">      &lt;/widget&gt;</span><br><span class="line">      &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;tab_2&quot;</span>&gt;</span><br><span class="line">       &lt;attribute name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;string&gt;离散输入状态寄存器&lt;/string&gt;</span><br><span class="line">       &lt;/attribute&gt;</span><br><span class="line">       &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_11&quot;</span>&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_13&quot;</span>&gt;</span><br><span class="line">          &lt;item&gt;</span><br><span class="line">           &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_10&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">             &lt;string&gt;读单个寄存器&lt;/string&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_15&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadInputStatus&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_16&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;指定地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxAddrReadInputStatus&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_17&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;数据:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxValueReadInputStatus&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximum&quot;</span>&gt;</span><br><span class="line">                &lt;number&gt;<span class="number">1</span>&lt;/number&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/widget&gt;</span><br><span class="line">          &lt;/item&gt;</span><br><span class="line">         &lt;/layout&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_12&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;读多个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_10&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_17&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadInputStatuses&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_19&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;起始地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxStartAddrReadInputStatuses&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_8&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;寄存器个数:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxReadInputStatusesCount&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPlainTextEdit&quot;</span> name=<span class="string">&quot;plainTextEditReadInputStatus&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;spacer name=<span class="string">&quot;verticalSpacer&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;orientation&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">enum</span>&gt;Qt::Vertical&lt;/<span class="keyword">enum</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;sizeHint&quot;</span> stdset=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">              &lt;size&gt;</span><br><span class="line">               &lt;width&gt;<span class="number">20</span>&lt;/width&gt;</span><br><span class="line">               &lt;height&gt;<span class="number">200</span>&lt;/height&gt;</span><br><span class="line">              &lt;/size&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/spacer&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">       &lt;/layout&gt;</span><br><span class="line">      &lt;/widget&gt;</span><br><span class="line">      &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;tab_3&quot;</span>&gt;</span><br><span class="line">       &lt;attribute name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;string&gt;保持寄存器&lt;/string&gt;</span><br><span class="line">       &lt;/attribute&gt;</span><br><span class="line">       &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_14&quot;</span>&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_14&quot;</span>&gt;</span><br><span class="line">          &lt;item&gt;</span><br><span class="line">           &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_9&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">             &lt;string&gt;写单个寄存器&lt;/string&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_16&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonWriteHoldRegister&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;WRITE&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_14&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;指定地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxAddrHoldRegister&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_15&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;数据:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxValueWriteHoldRegister&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximum&quot;</span>&gt;</span><br><span class="line">                &lt;number&gt;<span class="number">65535</span>&lt;/number&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/widget&gt;</span><br><span class="line">          &lt;/item&gt;</span><br><span class="line">          &lt;item&gt;</span><br><span class="line">           &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_11&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">             &lt;string&gt;读单个寄存器&lt;/string&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_18&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadHoldRegister&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_18&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;指定地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxAddrReadHoldRegister&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_20&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;数据:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxValueReadHoldRegister&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximum&quot;</span>&gt;</span><br><span class="line">                &lt;number&gt;<span class="number">65535</span>&lt;/number&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/widget&gt;</span><br><span class="line">          &lt;/item&gt;</span><br><span class="line">         &lt;/layout&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_13&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;写多个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_12&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_19&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonWriteHoldRegisters&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;WRITE&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_21&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;起始地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxStartAddrWriteHoldRegister&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPlainTextEdit&quot;</span> name=<span class="string">&quot;plainTextEditWriteHoldRegisters&quot;</span>/&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_14&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;读多个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_13&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_20&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadHoldRegisters&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_22&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;起始地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxStartAddrReadHoldRegisters&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_9&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;寄存器个数:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxReadHoldRegistersCount&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPlainTextEdit&quot;</span> name=<span class="string">&quot;plainTextEditReadHoldRegisters&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">       &lt;/layout&gt;</span><br><span class="line">      &lt;/widget&gt;</span><br><span class="line">      &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;tab_4&quot;</span>&gt;</span><br><span class="line">       &lt;attribute name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;string&gt;输入寄存器&lt;/string&gt;</span><br><span class="line">       &lt;/attribute&gt;</span><br><span class="line">       &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_3&quot;</span>&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_16&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;读单个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_22&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadInputRegister&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">              &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_24&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">              &lt;size&gt;</span><br><span class="line">               &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">               &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">              &lt;/size&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">              &lt;string&gt;指定地址:&lt;/string&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxAddrReadInpiutInputRegister&quot;</span>/&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_25&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">              &lt;size&gt;</span><br><span class="line">               &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">               &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">              &lt;/size&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">              &lt;string&gt;数据:&lt;/string&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxValueReadInputRegister&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;maximum&quot;</span>&gt;</span><br><span class="line">              &lt;number&gt;<span class="number">65535</span>&lt;/number&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">         &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QGroupBox&quot;</span> name=<span class="string">&quot;groupBox_15&quot;</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">           &lt;string&gt;读多个寄存器&lt;/string&gt;</span><br><span class="line">          &lt;/property&gt;</span><br><span class="line">          &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> name=<span class="string">&quot;verticalLayout_15&quot;</span>&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;layout <span class="keyword">class</span>=<span class="string">&quot;QHBoxLayout&quot;</span> name=<span class="string">&quot;horizontalLayout_21&quot;</span>&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPushButton&quot;</span> name=<span class="string">&quot;pushButtonReadInputRegisters&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;READ&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_23&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;maximumSize&quot;</span>&gt;</span><br><span class="line">                &lt;size&gt;</span><br><span class="line">                 &lt;width&gt;<span class="number">100</span>&lt;/width&gt;</span><br><span class="line">                 &lt;height&gt;<span class="number">16777215</span>&lt;/height&gt;</span><br><span class="line">                &lt;/size&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;起始地址:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxStartAddrReadInputRegisters&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QLabel&quot;</span> name=<span class="string">&quot;label_10&quot;</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;string&gt;寄存器数量:&lt;/string&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">              &lt;/widget&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">             &lt;item&gt;</span><br><span class="line">              &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QSpinBox&quot;</span> name=<span class="string">&quot;spinBoxReadInputRegistersCount&quot;</span>/&gt;</span><br><span class="line">             &lt;/item&gt;</span><br><span class="line">            &lt;/layout&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QPlainTextEdit&quot;</span> name=<span class="string">&quot;plainTextEditReadInputRegisters&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;enabled&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="type">bool</span>&gt;<span class="literal">false</span>&lt;/<span class="type">bool</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/widget&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">           &lt;item&gt;</span><br><span class="line">            &lt;spacer name=<span class="string">&quot;verticalSpacer_2&quot;</span>&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;orientation&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">enum</span>&gt;Qt::Vertical&lt;/<span class="keyword">enum</span>&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">             &lt;property name=<span class="string">&quot;sizeHint&quot;</span> stdset=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">              &lt;size&gt;</span><br><span class="line">               &lt;width&gt;<span class="number">20</span>&lt;/width&gt;</span><br><span class="line">               &lt;height&gt;<span class="number">200</span>&lt;/height&gt;</span><br><span class="line">              &lt;/size&gt;</span><br><span class="line">             &lt;/property&gt;</span><br><span class="line">            &lt;/spacer&gt;</span><br><span class="line">           &lt;/item&gt;</span><br><span class="line">          &lt;/layout&gt;</span><br><span class="line">         &lt;/widget&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">       &lt;/layout&gt;</span><br><span class="line">      &lt;/widget&gt;</span><br><span class="line">     &lt;/widget&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">   &lt;/layout&gt;</span><br><span class="line">  &lt;/widget&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMenuBar&quot;</span> name=<span class="string">&quot;menubar&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">    &lt;rect&gt;</span><br><span class="line">     &lt;x&gt;<span class="number">0</span>&lt;/x&gt;</span><br><span class="line">     &lt;y&gt;<span class="number">0</span>&lt;/y&gt;</span><br><span class="line">     &lt;width&gt;<span class="number">931</span>&lt;/width&gt;</span><br><span class="line">     &lt;height&gt;<span class="number">29</span>&lt;/height&gt;</span><br><span class="line">    &lt;/rect&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">  &lt;/widget&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QStatusBar&quot;</span> name=<span class="string">&quot;statusbar&quot;</span>/&gt;</span><br><span class="line"> &lt;/widget&gt;</span><br><span class="line"> &lt;resources/&gt;</span><br><span class="line"> &lt;connections/&gt;</span><br><span class="line">&lt;/ui&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从站设备配置</p>
</blockquote>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240812212650902.png" alt="image-20240812212650902"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/%E5%B5%8C%E5%85%A5%E5%BC%8F/assets/image-20240812212752284.png" alt="image-20240812212752284"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
  </entry>
  <entry>
    <title>多进程服务器端</title>
    <url>/2024/07/18/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="1-并发服务器端的实现方法"><a href="#1-并发服务器端的实现方法" class="headerlink" title="1. 并发服务器端的实现方法"></a>1. 并发服务器端的实现方法</h2><blockquote>
<ul>
<li>多进程服务器：通过创建多个进程提供服务。</li>
<li>多路复用服务器：通过捆绑并统一管理 I&#x2F;O 对象提供服务。</li>
<li>多线程服务器：通过生成与客户端等量的线程提供服务。</li>
</ul>
</blockquote>
<h2 id="2-进程"><a href="#2-进程" class="headerlink" title="2. 进程"></a>2. 进程</h2><p>​		<strong>进程</strong>：占用内存空间的正在运行的程序。</p>
<p>​		<strong>进程ID</strong>：无论进程是如何创建的，所有进程都会从操作系统分配到ID。此ID称为“进程ID”，其值为大于2的整数。因为1要分配给操作系统启动后的(用于协助操作系统)首个进程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps au #可以查看Linux正在运行的进程</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/image-20240717155510106.png" alt="image-20240717155510106"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="3-通过-fork-函数创建进程"><a href="#3-通过-fork-函数创建进程" class="headerlink" title="3. 通过 fork 函数创建进程"></a>3. 通过 fork 函数创建进程</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">fork</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">	-&gt; 成功返回进程ID，失败返回<span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>​		fork 函数将创建调用的进程副本。也就是说，并非根据完全不同的程序创建进程，而是复制正在运行的、调用fork函数的进程。另外，两个进程都将执行fork函数调用后的语句(准确的说是在fork函数返回后)。<font color=red>但因为通过同一个进程、复制相同的内存空间，之后的程序流要根据fork函数的返回值加以区分</font>。即利用fork函数的如下特点区分程序执行流程。</p>
<pre><code>* 父进程(原进程)： fork函数返回子进程ID
* 子进程：fork函数返回0
</code></pre>
<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>fork.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> gval = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> lval = <span class="number">20</span>;</span><br><span class="line">    gval++, lval += <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    pid = fork();	<span class="comment">// 复制发生点</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gval += <span class="number">2</span>;</span><br><span class="line">        lval += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        gval -= <span class="number">2</span>;</span><br><span class="line">        lval -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child Proc: [%d,%d]\n&quot;</span>, gval, lval);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent Proc: [%d,%d]\n&quot;</span>, gval, lval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ fork.cpp -o fork</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./fork </span><br><span class="line">Parent Proc: [9,23]</span><br><span class="line">Child Proc: [13,27]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从运行结果可以看出，调用fork函数后，父子进程拥有完全独立的内存结构。</span></span><br></pre></td></tr></table></figure>



<h2 id="4-进程和僵尸进程"><a href="#4-进程和僵尸进程" class="headerlink" title="4. 进程和僵尸进程"></a>4. 进程和僵尸进程</h2><p><strong>僵尸进程</strong>：进程完成工作后没有被销毁，仍占用系统中的重要资源。</p>
<p>​	</p>
<p><strong>僵尸进程产生的原因</strong></p>
<ul>
<li>传递参数并调用 exit 函数</li>
<li>main 函数中执行 return 语句并返回值</li>
</ul>
<p>​	    向 exit 传递的参数值和 main 函数的 return 语句返回值都会传递给操作系统。而操作系统不会销毁子进程，直到把这些值传递给产生该子进程的父进程。处在这种状态下的进程就是僵尸进程。也就是说，将子进程变为僵尸进程的正是操作系统。</p>
<p><strong>僵尸进程如何销毁呢？</strong> <font color=red>应该向创建子进程的父进程传递子进程的 exit 参数值或 return 语句的返回值</font></p>
<p><strong>如何向父进程传递这些值呢？</strong>操作系统不会主动把这些值传递给父进程。只有父进程主动发起请求(函数调用)时，操作系统才会传递该值。换言之，如果父进程未主动要求获取子进程的结束状态值，操作系统将一直保存，并让子进程长时间处于僵尸进程状态。</p>
<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>zombie.cpp</p>
</blockquote>
<p>​		</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;This is child process!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child process ID: &quot;</span> &lt;&lt; pid &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;End child process!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;End parent process!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ zombie.cpp -o zombie</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./zombie</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在<span class="built_in">sleep</span>(30)过程中，PID为1938的进程变为了僵尸进程(Z+)</span></span><br></pre></td></tr></table></figure>

<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/image-20240717172209449.png" alt="image-20240717172209449"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><font color=Orange>PS:  后台处理：.&#x2F;zombie &amp; 如果以这种方式运行程序，即可在一个控制台下输入命令，无需打开额外的控制台。</font></p>
<h2 id="5-销毁僵尸进程"><a href="#5-销毁僵尸进程" class="headerlink" title="5. 销毁僵尸进程"></a>5. 销毁僵尸进程</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">wait</span><span class="params">(<span class="type">int</span>* statloc)</span></span>;</span><br><span class="line">	-&gt; 成功返回终止的子进程ID，失败时返回<span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>​		调用此函数时如果已有子进程终止，那么子进程终止时传递的返回值(exit 函数的参数值、main 函数的 return 返回值)将保存到该函数的参数所指向内存空间。但函数参数指向的单元中还包含其他信息，因此需要通过下面的宏进行分离：</p>
<blockquote>
<ul>
<li>WIFEXITEDL		子进程正常终止时返回真(true)</li>
<li>WEXITSTATUS     返回子进程的返回值</li>
</ul>
</blockquote>
<p><em><strong>Example：</strong></em></p>
<blockquote>
<p>wait.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child PID: %d\n&quot;</span>, pid);</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child PID: %d\n&quot;</span>, pid);</span><br><span class="line">            <span class="built_in">wait</span>(&amp;status);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">WIFEXITED</span>(status))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Child send one: %d\n&quot;</span>, <span class="built_in">WEXITSTATUS</span>(status));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">wait</span>(&amp;status); <span class="comment">// 以为之前创建了两个进程，所以要再次调用</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">WIFEXITED</span>(status))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Child send two: %d\n&quot;</span>, <span class="built_in">WEXITSTATUS</span>(status));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ wait.cpp -o wait</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./wait </span><br><span class="line">Child PID: 2022</span><br><span class="line">Child PID: 2023</span><br><span class="line">Child send one: 3</span><br><span class="line">Child send two: 7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ps au 查看后并无上述结果中的PID对应的进程，这是因为调用了<span class="built_in">wait</span>函数完全销毁了该进程，另外两个子进程终止时返回值传递给了父进程</span></span><br></pre></td></tr></table></figure>

<p><font color=orange>PS: 调用wait函数时，如果没有已终止的子进程，那么程序将阻塞(Blocking)直到有子进程终止，需要谨慎调用该函数。</font></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式2：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span>* statloc, <span class="type">int</span> options)</span></span>;</span><br><span class="line">	-&gt; 成功时返回终止的子进程<span class="built_in">ID</span>(或<span class="number">0</span>)，失败时返回<span class="number">-1</span></span><br><span class="line">        • pid 		等到终止的目标子进程ID，若传递<span class="number">-1</span>，则与wait函数相同，可以等待任意子进程终止</span><br><span class="line">        • statloc	保存子进程的返回值(与 wait 函数中的参数作用一致)</span><br><span class="line">        • options	传递头文件sys/wait.h中的常量WNOHANG，即使没有终止的子进程也不会进入阻塞状态，而是返回<span class="number">0</span>并退出函数</span><br></pre></td></tr></table></figure>

<p><em><strong>Example：</strong></em></p>
<blockquote>
<p>waitpid.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">15</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;status, WNOHANG))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">3</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;sleep 3 sec!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">WIFEXITED</span>(status))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child send %d\n&quot;</span>, <span class="built_in">WEXITSTATUS</span>(status));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result：</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ waitpid.cpp -o wait</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./wait </span><br><span class="line">sleep 3 sec!</span><br><span class="line">sleep 3 sec!</span><br><span class="line">sleep 3 sec!</span><br><span class="line">sleep 3 sec!</span><br><span class="line">sleep 3 sec!</span><br><span class="line">Child send 24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">waitpid 不会阻塞</span></span><br></pre></td></tr></table></figure>



<h2 id="6-信号、signal-函数与-sigaction-函数"><a href="#6-信号、signal-函数与-sigaction-函数" class="headerlink" title="6. 信号、signal 函数与 sigaction 函数"></a>6. 信号、signal 函数与 sigaction 函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="built_in">void</span> (*<span class="built_in">signal</span>(<span class="type">int</span> signo, <span class="built_in">void</span> (*<span class="built_in">func</span>(<span class="type">int</span>))))(<span class="type">int</span>);</span><br><span class="line">	-&gt; 为了在产生信号时调用，返回之前注册的函数指针</span><br><span class="line">        • signo				特殊情况信息</span><br><span class="line">        • <span class="built_in">void</span> (*<span class="built_in">func</span>(<span class="type">int</span>))	 特殊情况下将要调用的函数的地址值(指针)</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">signal</span>(SIGNA:, mychild);  <span class="comment">// 定义了子进程终止的情况，signal 函数的第一个参数，signal 函数的第二个参数为处理 SIGNAL 的函数</span></span><br><span class="line">	-&gt; signal 函数中注册的部分(SIGNAL 部分)特殊情况和对应的常数:</span><br><span class="line">            • SIGALRM		已经通过调用 alarm 函数注册的时间</span><br><span class="line">            • SIGINT		输入 CTRL + C</span><br><span class="line">            • SIGCHLD		子进程终止</span><br></pre></td></tr></table></figure>

<p>​		以上就是信号注册过程，注册好信号后，发生注册信号时(注册的情况发生时)，将调用该信号对应的函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span></span>;</span><br><span class="line">	-&gt; 返回<span class="number">0</span>或以秒为单位的距SIGALRM信号发生的所剩时间</span><br></pre></td></tr></table></figure>

<p>​		<font color=green>如果调用该函数的同时向他传递一个正整形参数，相应时间后(以秒为单位)将产生SIGALRM信号。若向该函数传递0，则之前对SIGALRM信号的预约将取消。如果通过该函数预约信号后未指定该信号对应的处理函数，则(通过调用 signal 函数)终止进程，不做任何处理。</font></p>
<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>signal.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">timeout</span><span class="params">(<span class="type">int</span> sig)</span> <span class="comment">// 信号处理器</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sig == SIGALRM)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Time out!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">alarm</span>(<span class="number">2</span>); <span class="comment">// 为了每隔2s重复产生SIGALRM信号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keycontrol</span><span class="params">(<span class="type">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sig == SIGINT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;CTRL + C pressed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">signal</span>(SIGALRM, timeout);</span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, keycontrol);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">alarm</span>(<span class="number">2</span>); <span class="comment">// 预约2秒发生SIGALRM信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wait...&quot;</span>);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有按 CTRL + C</span></span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ signal.cpp -o signal</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./signal </span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有按 CTRL + C</span></span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ signal.cpp -o signal</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./signal </span><br><span class="line">wait...</span><br><span class="line">^CCTRL + C pressed!</span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br><span class="line">wait...</span><br><span class="line">^CCTRL + C pressed!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上面的Example可以看出：<font color=Greenyellow>发生信号时将唤醒由于调用sleep函数而进入阻塞状态的进程。</font></p>
</blockquote>
<blockquote>
<p><font color=Greenyellow>		调用函数的主体的确是操作系统，但进程处于睡眠状态时无法调用函数。因此，产生信号时，为了调用信号处理器，将唤醒由于调用sleep函数而进入阻塞状态的进程。而且，进程一旦被唤醒，就不会再进入休眠状态。即使还未到sleep函数中规定的时间也是如此。所以上面的代码不到10s就会结束，连续输入 CTRL + C 有可能1s都不到。</font></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sigaction</span><span class="params">(<span class="type">int</span> signo, <span class="type">const</span> <span class="keyword">struct</span> sigaction* act, <span class="keyword">struct</span> sigaction* oldact)</span></span>;</span><br><span class="line">	-&gt; 成功返回<span class="number">0</span>，失败返回<span class="number">-1</span></span><br><span class="line">        • signo		特殊情况信息</span><br><span class="line">        • act		对应第一个参数的信号处理函数(信号处理器)信息</span><br><span class="line">        • oldact	通过此参数获取之前注册的信号处理函数指针，若不需要则传递<span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sigaction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">void</span> (*sa_handler)(<span class="type">int</span>);	<span class="comment">// 保存信号处理函数的指针值(地址值)</span></span><br><span class="line">    <span class="type">sigset_t</span> sa_mask;		    </span><br><span class="line">    <span class="type">int</span> sa_flags;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sa_mast 和 sa_flags 的所有位均初始化为0即可，这两个成员用于指定信号相关的选项和特性。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color=Aqua>		signal函数可以完全代替sigaction函数，而且signal函数更稳定。signal函数在UNIX系列的不同操作系统中可能存在不同，但是sigaction函数完全相同，为了兼容性，更多的使用sigaction函数。</font></p>
</blockquote>
<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>sigaction.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">timeout</span><span class="params">(<span class="type">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sig == SIGALRM)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Time out!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">alarm</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> act;</span><br><span class="line">    act.sa_handler = timeout; <span class="comment">// 保存函数指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;act.sa_mask); <span class="comment">// 将sa_mask 函数的所有位初始化为0</span></span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sigaction</span>(SIGALRM, &amp;act, <span class="number">0</span>); <span class="comment">// 注册 SIGALRM 信号的处理器</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alarm</span>(<span class="number">2</span>); <span class="comment">// 2s后发生 SIGALRM 信号</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wait...&quot;</span>);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ sigaction.cpp -o sigaction</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./sigaction</span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br><span class="line">wait...</span><br><span class="line">Time out!</span><br></pre></td></tr></table></figure>



<h2 id="7-利用信号处理技术消灭僵尸进程"><a href="#7-利用信号处理技术消灭僵尸进程" class="headerlink" title="7. 利用信号处理技术消灭僵尸进程"></a>7. 利用信号处理技术消灭僵尸进程</h2><p><font color=Greenyellow>子进程结束的时候会产生 SIGCHLD 信号</font></p>
<p><em><strong>Example：</strong></em></p>
<blockquote>
<p>remove_zombie.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_childproc</span><span class="params">(<span class="type">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">pid_t</span> id = <span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;status, WNOHANG);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WIFEXITED</span>(status))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Removed proc id: %d\n&quot;</span>, id); <span class="comment">// 子进程的pid</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child send: %d\n&quot;</span>, <span class="built_in">WEXITSTATUS</span>(status)); <span class="comment">// 子继承的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> act;</span><br><span class="line">    act.sa_handler = read_childproc;</span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sigaction</span>(SIGCHLD, &amp;act, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;This is child process1!&quot;</span>);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child proc id: %d\n&quot;</span>, pid);</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;This is child process2!&quot;</span>);</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">24</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child proc id: %d\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;wait...&quot;</span>);</span><br><span class="line">                <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result：</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能先释放第2个，也可能先释放第1个</span></span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ remove_zombie.cpp -o remove_zombie</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./remove_zombie </span><br><span class="line">Child proc id: 2616</span><br><span class="line">This is child process1!</span><br><span class="line">Child proc id: 2617</span><br><span class="line">wait...</span><br><span class="line">This is child process2!</span><br><span class="line">wait...</span><br><span class="line">Removed proc id: 2616</span><br><span class="line">Child send: 12</span><br><span class="line">wait...</span><br><span class="line">Removed proc id: 2617</span><br><span class="line">Child send: 24</span><br><span class="line">wait...</span><br><span class="line">wait...</span><br></pre></td></tr></table></figure>



<h2 id="8-基于多任务的并发服务器"><a href="#8-基于多任务的并发服务器" class="headerlink" title="8. 基于多任务的并发服务器"></a>8. 基于多任务的并发服务器</h2><p><strong>基于进程的并发服务器模型</strong></p>
<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/5c453664cde26.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		每当有客户端请求服务时（连接请求时），回声服务器端都创建子进程以提供服务。请求服务的客户端若有10个，则将创建10个子进程提供服务。为了完成这些任务，需要经历以下过程：</p>
<pre><code>- &lt;font color=Aqua&gt;第一阶段：回声服务器端（父进程）通过调用 accept 函数受理连接的请求；&lt;/font&gt;
- &lt;font color=Aqua&gt;第二阶段：此时获取的套接字文件描述符创建并传递给子进程；&lt;/font&gt;
- &lt;font color=Aqua&gt;第三阶段：子进程利用传递来的文件描述符体提供服务。&lt;/font&gt;
</code></pre>
<p><em><strong>容易引起误解的是：子进程传递套接字文件描述符的方法：子进程会复制父进程的所有资源，不需要通过另外经过传递文件描述符的过程。</strong></em></p>
<p><em><strong>Example：</strong></em></p>
<blockquote>
<p>echo_mpserver.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_childproc</span><span class="params">(<span class="type">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    pid = <span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;status, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;remove proc: %d\n&quot;</span>, pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> act;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr, clnt_addr;</span><br><span class="line">    <span class="type">int</span> str_len, state;</span><br><span class="line">    <span class="type">socklen_t</span> addr_sz;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    act.sa_handler = read_childproc;</span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sigaction</span>(SIGCHLD, &amp;act, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    serv_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;bind() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;listen() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        addr_sz = <span class="built_in">sizeof</span>(clnt_addr);</span><br><span class="line">        clnt_sock = <span class="built_in">accept</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;clnt_addr, &amp;addr_sz);</span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;client socket create error! reason: %s\n&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;new client connected...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pid = fork(); <span class="comment">// 此时父子进程分别带有一个套接字</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clnt_sock);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(serv_sock); <span class="comment">// 关闭服务器套接字，因为子进程共享了父进程的资源</span></span><br><span class="line">            <span class="keyword">while</span> ((str_len = <span class="built_in">read</span>(clnt_sock, buff, BUFF_SIZE)) != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">write</span>(clnt_sock, buff, str_len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">close</span>(clnt_sock);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;client finished and disconnect successfully!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clnt_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(serv_sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>echo_mpclient.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_routine</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> str_len = <span class="built_in">read</span>(sock, buf, BUFF_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (str_len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buf[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Message from server: %s&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_routine</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fgets</span>(buf, BUFF_SIZE, stdin);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(buf, <span class="string">&quot;q\n&quot;</span>) || !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;Q\n&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 向服务器传递EOF，因为fork函数复制了文件描述组，所以调用1次close不够</span></span><br><span class="line">            <span class="built_in">shutdown</span>(sock, SHUT_WR); </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">write</span>(sock, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;IP&gt; &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">2</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;connect() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_routine</span>(sock, buff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read_routine</span>(sock, buff);</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">close</span>(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>Result：</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server</span></span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./server 9190</span><br><span class="line">new client connected...</span><br><span class="line">client finished and disconnect successfully!</span><br><span class="line"></span><br><span class="line">remove proc: 2093</span><br><span class="line">client socket create error! reason: Interrupted system call</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client</span></span><br><span class="line"></span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./client 127.0.0.1 9190</span><br><span class="line">demo</span><br><span class="line">Message from server: demo</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">42行调用shutdown函数向服务器端传递EOF。当然执行43行<span class="built_in">return</span>语句之后会调用84行的close函数传递EOF。但是现在已经通过了fork函数复制了文件描述符，此时无法通过一次close函数调用传递EOF，因此需要调用shutdown函数调用另外传递。</span>    </span><br></pre></td></tr></table></figure>



<h3 id="通过-fork-函数复制文件描述符"><a href="#通过-fork-函数复制文件描述符" class="headerlink" title="通过 fork 函数复制文件描述符"></a>通过 fork 函数复制文件描述符</h3><p>​		上面的 echo_mpserver.cpp 中，父进程将2个套接字（一个是服务器端套接字，另一个是客户端连接的套接字）文件描述符复制给了子进程。</p>
<p>​		但是套接字并没有复制给子进程，从严格意义上来讲，套接字属于操作系统—-试试进程拥有代表相应套接字的文件描述符。仅因为如下原因，复制套接字也并不合理。<font color=oragne>复制套接字后，同一端口将对应多个套接字。</font></p>
<p>​		echo_mpserver.cpp 中 fork 函数调用过程如下：（调用 fork 函数后，2个文件描述符指向同一个套接字）</p>
<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/image-20240718083506049.png" alt="image-20240718083506049"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><font color=red>		如上图，1个套接字中存在2个文件描述符时，只有2个文件描述符都终止（销毁）后，才能销毁套接字。如果维持图中的连接状态，即使子进程销毁了与客户端连接的套接字文件描述符，也无法完全销毁套接字（服务器端套接字也是如此）。因此调用 fork 函数后，要将无关的套接字文件描述符都关掉。</font>如下图：</p>
<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/image-20240718083813302.png" alt="image-20240718083813302"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>echo_mpserver.cpp 中 88行、101行分别调用了 close 函数。</p>
<h2 id="9-分割-TCP-的-I-O-程序"><a href="#9-分割-TCP-的-I-O-程序" class="headerlink" title="9. 分割 TCP 的 I&#x2F;O 程序"></a>9. 分割 TCP 的 I&#x2F;O 程序</h2><h3 id="分割-TCP-的-I-O-程序-的优点"><a href="#分割-TCP-的-I-O-程序-的优点" class="headerlink" title="分割 TCP 的 I&#x2F;O 程序 的优点"></a>分割 TCP 的 I&#x2F;O 程序 的优点</h3><p><strong>之前的回声客户端的数据回声方式如下：</strong> 向服务器端传输数据，等待服务器端回复。无条件的等待，直到接收完服务器端的回声数据后，才能传输下一批数据。</p>
<p>​		因为程序代码中重复调用了 read 和 write 函数，但是<strong>现在考虑分割数据收发过程：</strong></p>
<p>客户端的父进程负责接收数据，额外创建的子进程负责发送数据。分割后，不同进程分别负责输入和输出，这样，无论客户端是否从服务器端接收完数据都可以进行传输。</p>
<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/image-20240718085056086.png" alt="image-20240718085056086"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>另外一个优点</strong>：可以提交频繁交换数据的程序性能。</p>
<p><img src="/../picture/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/image-20240718085157220.png" alt="image-20240718085157220"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		左侧的是之前的回声客户端，右侧的是分割 I&#x2F;O 后的客户端接收数据传输方式。分割 I&#x2F;O 后的客户端发送数据时不必考虑接收数据的情况，因此可以连续发送数据，由此提高同一时间内传输的数据量。这种差异在网络较慢时尤为明显。</p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>域名及网络地址</title>
    <url>/2024/07/17/%E5%9F%9F%E5%90%8D%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h2 id="1-域名系统"><a href="#1-域名系统" class="headerlink" title="1.域名系统"></a>1.域名系统</h2><p>​    DNS是对IP地址和域名进行相互转换的系统，其核心是DNS服务器。</p>
<h2 id="2-IP地址和域名之间的转换"><a href="#2-IP地址和域名之间的转换" class="headerlink" title="2. IP地址和域名之间的转换"></a>2. IP地址和域名之间的转换</h2><p>​        IP地址比域名发生变更的频率要高，所以利用IP地址编写程序并非上策。还有什么解决办法呢？一旦注册域名可能永久不变，因此利用域名编程程序可能会好一些。这样，每次程序运行时根据域名获取IP地址，再接入服务器，这样程序就不会依赖于服务器IP地址了。所以说，<strong>程序中也需要IP地址和域名之间的转换函数。</strong></p>
<h2 id="3-利用域名获取-IP-地址"><a href="#3-利用域名获取-IP-地址" class="headerlink" title="3.利用域名获取 IP 地址"></a>3.利用域名获取 IP 地址</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过传递字符串格式的域名获取IP地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span>* <span class="built_in">gethostbyname</span>(<span class="type">const</span> <span class="type">char</span>* hostname);</span><br><span class="line">	-&gt; 成功时返回 hostent 结构体地址，失败时返回 <span class="literal">NULL</span> 指针。</span><br></pre></td></tr></table></figure>

<p>​        上面的函数只要传递域名字符串，就会返回域名对应的 IP 地址。返回时，地址信息装入 hostent 结构体。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* h_name;	    <span class="comment">// 存储的是官方域名</span></span><br><span class="line">    <span class="type">char</span>** h_aliases;   <span class="comment">// 可以通过多个域名访问同一主页。同一 IP 可以绑定多个域名</span></span><br><span class="line">    <span class="type">int</span> h_addrtype;	    <span class="comment">// 通过此变量获取h_addr_list的IP地址的地址族信息(支持IPv4、IPv6)</span></span><br><span class="line">    <span class="type">int</span> h_length;       <span class="comment">// IP地址长度,IPv4长度为4字节，保存4；IPv6长度为16字节，保存16</span></span><br><span class="line">    <span class="type">char</span>** h_addr_list; <span class="comment">// 以整数形式保存域名对应的IP地址；用户较多的网站可能分配多个IP给					  </span></span><br><span class="line">    				  <span class="comment">// 同一域名，利用多个服务器进行负载均衡。同样可以使用此便行获取IP地址信息。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Example:</strong></em></p>
<blockquote>
<p>gethostbyname.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handing</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hostent</span>* host;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;addr&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    host = <span class="built_in">gethostbyname</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!host)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handing</span>(<span class="string">&quot;gethostname error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Offical name: %s\n&quot;</span>, host-&gt;h_name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; host-&gt;h_aliases[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Aliases %d: %s\n&quot;</span>, i + <span class="number">1</span>, host-&gt;h_aliases[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address type: %s\n&quot;</span>, (host-&gt;h_addrtype == AF_INET) ? <span class="string">&quot;AF_INET&quot;</span> : <span class="string">&quot;AF_INET6&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; host-&gt;h_addr_list[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;IP addr %d: %s\n&quot;</span>, i + <span class="number">1</span>, <span class="built_in">inet_ntoa</span>(*(<span class="keyword">struct</span> in_addr*)host-&gt;h_addr_list[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/tcpip# g++ gethostbyname.cpp -o hostname</span><br><span class="line">root@jarryli:/tcpip# ./hostname www.naver.com</span><br><span class="line">Offical name: www.g.naver.com</span><br><span class="line">Aliases 1: www.naver.com</span><br><span class="line">IP addr 1: 202.131.29.70</span><br><span class="line">IP addr 2: 222.122.195.6</span><br></pre></td></tr></table></figure>



<h2 id="4-利用域名获取-IP-地址"><a href="#4-利用域名获取-IP-地址" class="headerlink" title="4.利用域名获取 IP 地址"></a>4.利用域名获取 IP 地址</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span>* <span class="built_in">gethostbyaddr</span>(<span class="type">const</span> <span class="type">char</span>* addr, <span class="type">socklen_t</span> len, <span class="type">int</span> family);</span><br><span class="line">	-&gt; 成功返回 hostent 结构体变量的地址，失败时返回 <span class="literal">NULL</span> 指针</span><br><span class="line">        • addr		含有IP地址信息的in_addr结构体。为了同时传递IPv4之外的地址，变量类型为<span class="type">char</span>*</span><br><span class="line">        • len		向第一个参数传递的地址信息的字节数，IPv4时为<span class="number">4</span>，IPv6时为<span class="number">16</span></span><br><span class="line">        • family	传递地址族信息，IPv4为AF_INET，IPv6时为AF_INET6</span><br></pre></td></tr></table></figure>

<p><em><strong>Example：</strong></em></p>
<blockquote>
<p>gethostbyaddr.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handing</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hostent</span>* host;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> addr;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage : %s &lt;IP&gt; \n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(addr));</span><br><span class="line">    addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    host = <span class="built_in">gethostbyaddr</span>((<span class="type">char</span>*)&amp;addr.sin_addr, <span class="number">4</span>, AF_INET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!host)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handing</span>(<span class="string">&quot;gethostbyaddr error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Official name: %s\n&quot;</span>, host-&gt;h_name);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; host-&gt;h_aliases[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Aliases %d: %s\n&quot;</span>, i + <span class="number">1</span>, host-&gt;h_aliases[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address type: %s\n&quot;</span>, (host-&gt;h_addrtype == AF_INET) ? <span class="string">&quot;AF_INET&quot;</span> : <span class="string">&quot;AF_INET6&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; host-&gt;h_addr_list[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;IP addr %d: %s\n&quot;</span>, i + <span class="number">1</span>, <span class="built_in">inet_ntoa</span>(*(<span class="keyword">struct</span> in_addr*)host-&gt;h_addr_list[i]));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result：</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/tcpip# g++ gethostbyaddr.cpp -o byaddr</span><br><span class="line">root@jarryli:/tcpip# ./byaddr 127.0.0.1</span><br><span class="line">Official name: localhost</span><br><span class="line">Address type: AF_INET</span><br><span class="line">IP addr 1: 127.0.0.1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>序列化-protobuf</title>
    <url>/2024/07/14/%E5%BA%8F%E5%88%97%E5%8C%96-protobuf/</url>
    <content><![CDATA[<h1 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1. 序列化"></a>1. 序列化</h1><blockquote>
<p>序列化 (Serialization)将对象的<strong>状态信息转换为</strong>可以<strong>存储或传输的形式的过程</strong>，与之相对应的过程称之为反序列化（Unserialization）。<strong>序列化和反序列化主要用于解决在跨平台和跨语言的情况下, 模块之间的交互和调用，但其本质是为了解决数据传输问题</strong>。 </p>
<p>实现数据序列化:</p>
<ul>
<li>要有原始数据<ul>
<li>复合类型 -&gt; 最常见的情况</li>
<li>基础数据类型</li>
</ul>
</li>
<li>通过某些方式 -&gt; 另外一种形式的数据</li>
<li>得到的数据干啥? -&gt; 目的: 进行分发, 分发到不同的终端&#x2F;平台, 保证不同的平台能正确解析<ul>
<li>网络传输</li>
<li>磁盘拷贝</li>
</ul>
</li>
</ul>
<p><font color="red">序列化目的不是为了加密, 为的是数据的跨平台传输</font></p>
<p>序列化的整体过程:</p>
<ul>
<li>发送端<ul>
<li>原始数据 -&gt; 序列化 (编码) -&gt; 特殊格式的字符串</li>
<li>发送这个字符串</li>
</ul>
</li>
<li>接收端:<ul>
<li>接收数据</li>
<li>特殊格式的字符串 -&gt; 反序列化 (解码) -&gt; 原始数据</li>
<li>对原始数据进行处理</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="1-1-网络通信中的问题分析"><a href="#1-1-网络通信中的问题分析" class="headerlink" title="1.1 网络通信中的问题分析"></a>1.1 网络通信中的问题分析</h2><p>发送过程中遇到的一些问题?</p>
<ul>
<li><p>平台不同</p>
<ul>
<li>32bit &#x2F; 64bit <ul>
<li>long</li>
</ul>
</li>
<li>平台不同, 某些数据类型占用的内存大小不同</li>
</ul>
</li>
<li><p>如果不是字符串, 需要进行字节序转换</p>
<ul>
<li><p>字符串没有字节序问题, 字符在内存中只占一个字节</p>
</li>
<li><p>如果发送的是结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">12</span>];</span><br><span class="line">    <span class="type">long</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test t;</span><br><span class="line">send()/write()</span><br><span class="line">send(fd, (<span class="type">void</span>*)t, <span class="keyword">sizeof</span>(t), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>大小端问题</p>
</li>
</ul>
</li>
<li><p>语言不同</p>
<ul>
<li>语言不同数据类型占用的内存有可能不同<ul>
<li>c -&gt; char -&gt; 1字节</li>
<li>java -&gt; char -&gt; 2字节</li>
</ul>
</li>
</ul>
</li>
<li><p>字节对齐问题</p>
</li>
</ul>
<h2 id="1-2-常用的序列化方式"><a href="#1-2-常用的序列化方式" class="headerlink" title="1.2 常用的序列化方式"></a>1.2 常用的序列化方式</h2><ol>
<li><p>XML（ Extensible Markup Language ）类似于html</p>
<blockquote>
<p>XML是一种常用的序列化和反序列化协议，具有跨机器，跨语言等优点。XML历史悠久，其1.0版本早在1998年就形成标准，并被广泛使用至今。</p>
<p>XML的最初产生目标是对互联网文档进行标记，所以它的设计理念中就包含了对于人和机器都具备可读性。 但是，当这种标记文档的设计被用来序列化对象的时候，就显得冗长而复杂。</p>
<p>XML基本格式:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Library</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Type</span> <span class="attr">name</span>=<span class="string">&quot;小说&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特1<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特2<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特3<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;J.K.ROWLING&quot;</span> <span class="attr">price</span>=<span class="string">&quot;12$&quot;</span>&gt;</span>哈利波特4<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Type</span> <span class="attr">name</span>=<span class="string">&quot;历史&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Book</span> <span class="attr">author</span>=<span class="string">&quot;司马迁&quot;</span> <span class="attr">price</span>=<span class="string">&quot;20$&quot;</span>&gt;</span>史记<span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Library</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Json（ JavaScript Object Notation ）</p>
<blockquote>
<p>JSON起源于弱类型语言Javascript，它的产生来自于一种称之为”关联数组（Associative array）”的概念，其本质是就是采用”键值对”的方式来描述对象。</p>
<p>JSON格式保持了XML的人眼可读的优点，非常符合工程师对对象的理解。</p>
<p>相对于XML而言，序列化后的数据更加简洁（XML所产生序列化之后文件的大小接近JSON的两倍），而且其协议比较简单，解析速度比较快。</p>
<p>JSON格式具备Javascript的先天性支持，所以被广泛应用于Web browser的应用常景中，是Ajax的事实标准协议。</p>
<p>更多资料可查看：<a href="http://json.org/">http://json.org/</a></p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json是一种数据格式, 不是语言, 和平台语言无关</span></span><br><span class="line"><span class="comment">// json数组</span></span><br><span class="line"><span class="punctuation">[</span>整形<span class="punctuation">,</span> 浮点型<span class="punctuation">,</span> 布尔类型<span class="punctuation">,</span> 字符串<span class="punctuation">,</span> json数组<span class="punctuation">,</span> json对象<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">12</span><span class="punctuation">,</span> <span class="number">12.44</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment">// json对象</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">json对象中是n个键值对</span><br><span class="line">key<span class="punctuation">:</span> 必须是字符串</span><br><span class="line">value<span class="punctuation">:</span> </span><br><span class="line">	整形</span><br><span class="line">	浮点型</span><br><span class="line">	布尔</span><br><span class="line">	字符串</span><br><span class="line">	json数组</span><br><span class="line">	json对象</span><br><span class="line"></span><br><span class="line">注意事项<span class="punctuation">:</span></span><br><span class="line">	在一个文件中只能存储一个大的数组或者对象<span class="punctuation">,</span> 但是可以嵌套使用</span><br><span class="line">	原素和原始之间使用逗号间隔(一个键值对视为一个元素)</span><br><span class="line">	最后一个元素后边没有逗号</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lilei&quot;</span><span class="punctuation">:</span><span class="string">&quot;112334&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tom&quot;</span><span class="punctuation">:</span><span class="string">&quot;helolll&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucy&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxxxyyyy&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="string">&quot;历史&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;张三&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;father&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三丰&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mother&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sister&quot;</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;favorite&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;足球&quot;</span><span class="punctuation">,</span> <span class="string">&quot;乒乓&quot;</span><span class="punctuation">,</span> <span class="string">&quot;游泳&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">	<span class="attr">&quot;李四&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Protocol Buffer</p>
</li>
<li><p>ASN.1 抽象语法标记(Abstract Syntax Notation One) </p>
</li>
<li><p>boost 序列化的类</p>
</li>
</ol>
<h1 id="2-protobuf"><a href="#2-protobuf" class="headerlink" title="2. protobuf"></a>2. protobuf</h1><blockquote>
<p>Protocol Buffer( 简称 Protobuf) 是Google公司内部的混合语言数据标准，它是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或RPC 数据交换格式。</p>
<p>Protobuf是一个纯粹的展示层协议，可以和各种传输层协议一起使用，Protobuf的文档也非常完善。google 提供了多种语言的实现：java、c#、c++、go 和 python，每一种实现都包含了相应语言的编译器以及库文件。</p>
<p>Protobuf支持的数据类型相对较少，不支持常量类型。由于其设计的理念是纯粹的展现层协议，目前并没有一个专门支持Protobuf的RPC框架。</p>
<p>更多资料可查看：<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a></p>
</blockquote>
<h2 id="2-1-操作流程"><a href="#2-1-操作流程" class="headerlink" title="2.1 操作流程"></a>2.1 操作流程</h2><blockquote>
<ul>
<li>准备数据<ul>
<li>复合类型: 结构体&#x2F; 类</li>
<li>基础类型</li>
</ul>
</li>
<li>创建一个新文件 <code>xxx.proto</code></li>
<li>将我们要序列化的数据 -&gt; 写入到proto文件<ul>
<li>有语法格式</li>
</ul>
</li>
<li>通过一个命令 <code>protoc</code>将<code>xxx.proto</code>文件生成一个c++的类 <ul>
<li>对应一个头文件&#x2F; 源文件</li>
<li>操作命令-&gt; 在window终端中: <code>protoc xxx.proto --cpp_out=./</code></li>
</ul>
</li>
<li>直接使用这个类<ul>
<li>里边有对数据操作的api<ul>
<li>读数据 api<ul>
<li>方法名字 <code>变量名()</code></li>
</ul>
</li>
<li>写数据 api<ul>
<li>方法名字: <code>set_变量名(arg)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要序列化的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Persion</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> sex;	<span class="comment">// man woman</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在.proto文件中定义消息格式</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// protobuf的版本</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;	<span class="comment">// proto2</span></span><br><span class="line"><span class="comment">// 组织Persion结构体</span></span><br><span class="line"><span class="comment">// 语法格式</span></span><br><span class="line">message 关键字(相当于被创建出的类的名字)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 成员变量</span></span><br><span class="line">	数据类型 变量名 = 变量的编号;	<span class="comment">// 编号从1开始, 不能重复</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .proto文件 生成 c++ 类的命令</span></span><br><span class="line">protoc proto文件名 --cpp_out=生成目录</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">.proto类型</th>
<th align="center">**C++**类型</th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">double</td>
<td align="center">double</td>
<td>64位浮点数</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">float</td>
<td>32位浮点数</td>
</tr>
<tr>
<td align="center">int32</td>
<td align="center">int32</td>
<td>32位整数</td>
</tr>
<tr>
<td align="center">int64</td>
<td align="center">int64</td>
<td>64位整数</td>
</tr>
<tr>
<td align="center">uint32</td>
<td align="center">uint32</td>
<td>32位无符号整数</td>
</tr>
<tr>
<td align="center">uint64</td>
<td align="center">uint64</td>
<td>64位无符号整数</td>
</tr>
<tr>
<td align="center">sint32</td>
<td align="center">sint32</td>
<td>32位整数，处理负数效率比int32更高</td>
</tr>
<tr>
<td align="center">sint64</td>
<td align="center">sint64</td>
<td>64位整数，处理负数效率比int64更高</td>
</tr>
<tr>
<td align="center">fixed32</td>
<td align="center">uint32</td>
<td>总是4个字节。如果数值总是比总是比228大的话，这个类型会比uint32高效。</td>
</tr>
<tr>
<td align="center">fixed64</td>
<td align="center">uint64</td>
<td>总是8个字节。如果数值总是比总是比256大的话，这个类型会比uint64高效。</td>
</tr>
<tr>
<td align="center">sfixed32</td>
<td align="center">int32</td>
<td>总是4个字节</td>
</tr>
<tr>
<td align="center">sfixed64</td>
<td align="center">int64</td>
<td>总是8个字节</td>
</tr>
<tr>
<td align="center">bool</td>
<td align="center">bool</td>
<td>布尔类型</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">string</td>
<td>一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本</td>
</tr>
<tr>
<td align="center">bytes</td>
<td align="center">string</td>
<td>处理多字节的语言字符、如中文</td>
</tr>
<tr>
<td align="center">enum</td>
<td align="center">enum</td>
<td>枚举</td>
</tr>
<tr>
<td align="center">message</td>
<td align="center">object of class</td>
<td>自定义的消息类型</td>
</tr>
</tbody></table>
</li>
<li><p>repeated限定修饰符</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要求name有多个 -&gt; 数组</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="comment">// vector&lt;string&gt; name;</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;	<span class="comment">// name可以在程序中创建多个, 在程序中作为动态数组来使用</span></span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>枚举</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 定义枚举</span></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">	Red = <span class="number">0</span>;	<span class="comment">// protbuf中第一个枚举值必须为0</span></span><br><span class="line">	Green = <span class="number">6</span>;</span><br><span class="line">	Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    Color color = <span class="number">5</span>;	<span class="comment">// 枚举变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>proto文件的导入</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Persion.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 导入另外一个proto文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;Info.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">	Red = <span class="number">0</span>;	<span class="comment">// protbuf中第一个枚举值必须为0</span></span><br><span class="line">	Green = <span class="number">6</span>;</span><br><span class="line">	Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    Color color = <span class="number">5</span>;</span><br><span class="line">    Info info = <span class="number">6</span>;	<span class="comment">// Info对象, 导入的proto文件中的类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Info.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Info</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bytes</span> address = <span class="number">1</span>;  <span class="comment">// 地址</span></span><br><span class="line">    <span class="type">int32</span> number = <span class="number">2</span>;   <span class="comment">// 门牌号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>包 -&gt; 命名空间</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Persion.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 导入另外一个proto文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;Info.proto&quot;</span>;</span><br><span class="line"><span class="comment">// 添加命名空间</span></span><br><span class="line"><span class="keyword">package</span> itcast;	<span class="comment">// Persion类属于itcast这个命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">	Red = <span class="number">0</span>;	<span class="comment">// protbuf中第一个枚举值必须为0</span></span><br><span class="line">	Green = <span class="number">6</span>;</span><br><span class="line">	Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;   <span class="comment">// 编号从1开始</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    Color color = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 命名空间.类名</span></span><br><span class="line">    itheima.Info info = <span class="number">6</span>;	<span class="comment">// Info对象, 导入的proto文件中的类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Info.proto</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// Persion类属于itheima这个命名空间</span></span><br><span class="line"><span class="keyword">package</span> itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Persion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bytes</span> address = <span class="number">1</span>;  <span class="comment">// 地址</span></span><br><span class="line">    <span class="type">int32</span> number = <span class="number">2</span>;   <span class="comment">// 门牌号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用protobuf编译器生成C++类</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protobuf编译器, 编译源码得到的 protoc.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--cpp_out 生成的c++类的位置</span></span><br><span class="line">protoc.exe xxx.proto --cpp_out=目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用C++ API来读写消息</p>
<ul>
<li>读: <code>变量名()</code></li>
<li>写: <code>set_变量名(arg1, arg2, ...)</code></li>
</ul>
</li>
<li><p>vs配置 -&gt; 添加宏</p>
<p><img src="/../picture/%E5%BA%8F%E5%88%97%E5%8C%96-protobuf/1566718547217.png" alt="1566718547217"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<h1 id="3-业务数据分析"><a href="#3-业务数据分析" class="headerlink" title="3. 业务数据分析"></a>3. 业务数据分析</h1><h2 id="3-1-客户端"><a href="#3-1-客户端" class="headerlink" title="3.1 客户端"></a>3.1 客户端</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备要发送的数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RequestMsg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1 密钥协商 //2 密钥校验; // 3 密钥注销</span></span><br><span class="line">    <span class="type">int</span> cmdType; <span class="comment">// 报文类型</span></span><br><span class="line">    string clientId; <span class="comment">// 客户端编号</span></span><br><span class="line">    string serverId; <span class="comment">// 服务器端编号</span></span><br><span class="line">    string sign;</span><br><span class="line">    string data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">RequestMsg</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int32</span> cmdType;</span><br><span class="line">	<span class="type">bytes</span> clientId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-2-服务器端"><a href="#3-2-服务器端" class="headerlink" title="3.2 服务器端"></a>3.2 服务器端</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RespondMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">bool</span> rv; <span class="comment">// 返回值</span></span><br><span class="line">    <span class="type">int</span> seckeyid; 		<span class="comment">// 对称密钥编号 keysn</span></span><br><span class="line">    <span class="built_in">string</span> clientId; 	<span class="comment">// 客户端编号</span></span><br><span class="line">    <span class="built_in">string</span> serverId; 	<span class="comment">// 服务器编号</span></span><br><span class="line">    <span class="built_in">string</span> data; 	<span class="comment">// 服务器端随机数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/%E5%BA%8F%E5%88%97%E5%8C%96-protobuf/protobuf.svg"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>套接字的多种可选项</title>
    <url>/2024/07/17/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%8F%AF%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="1-套接字的多种可选项"><a href="#1-套接字的多种可选项" class="headerlink" title="1. 套接字的多种可选项"></a>1. 套接字的多种可选项</h2><table>
<thead>
<tr>
<th align="center">协议层</th>
<th>选项名</th>
<th>读取</th>
<th>设置</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SOL_SOCKET<br />(IP协议相关事项)</td>
<td>SO_SNDBUF<br />SO_RCVBUF<br />SO_REUSEADDR<br />SO_KEEPALIVE<br />SO_BROADCAST<br />SO_DONTROUTE<br />SO_OOBINLINE<br />SO_ERROR<br />SO_TYPE</td>
<td>O<br />O<br />O<br />O<br />O<br />O<br />O<br />O<br />O</td>
<td>O<br />O<br />O<br />O<br />O<br />O<br />O<br />X<br />X</td>
</tr>
<tr>
<td align="center">IPPROTO_IP<br />（TCP协议相关事项）</td>
<td>IP_TOS<br />TO_TTL<br />IP_MULTICAST_TTL<br />IP_MULTICAST_LOOP<br />IP_MULTICAST_IF</td>
<td>O<br />O<br />O<br />O<br />O</td>
<td>O<br />O<br />O<br />O<br />O</td>
</tr>
<tr>
<td align="center">IPPROTO_TCP<br />（套接字相关的通用可选项）</td>
<td>TCP_KEEPALIVE<br />TCP_NODELAY<br />TCP_MAXSEG</td>
<td>O<br />O<br />O</td>
<td>O<br />O<br />O</td>
</tr>
</tbody></table>
<h2 id="2-getsockopt-setsockopt"><a href="#2-getsockopt-setsockopt" class="headerlink" title="2. getsockopt &amp;&amp; setsockopt"></a>2. getsockopt &amp;&amp; setsockopt</h2><p>​		我们几乎可以这对上表中的所有可选项进行读取(Get)和设置(Set)，当然有些可选项只能进行一种操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsockopt</span><span class="params">(<span class="type">int</span> sock, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">void</span>* optval, <span class="type">socklen_t</span>* optlen)</span></span>;</span><br><span class="line">	-&gt; 成功返回<span class="number">0</span>，失败返回<span class="number">-1</span></span><br><span class="line">        • sock		用于查看选项套接字文件描述符</span><br><span class="line">        • level		要查看的可选项的协议层</span><br><span class="line">        • optname	要查看的可选项名</span><br><span class="line">        • optval	保存查看结果的缓冲地址值</span><br><span class="line">        • optlen	向第四个参数(optval)传递的缓冲区大小。调用函数后，该变量中保存通过第四个参数返回的可选项信息的字节数</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">setsockopt</span><span class="params">(<span class="type">int</span> sock, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">const</span> <span class="type">void</span>* optval, <span class="type">socklen_t</span> optlen)</span></span>;</span><br><span class="line">	-&gt; 成功返回<span class="number">0</span>，失败返回<span class="number">-1</span></span><br><span class="line">        • sock		用于更改可选项的套接字文件描述符</span><br><span class="line">        • level		要更改的可选项的协议层</span><br><span class="line">        • optname	要更改的可选项名</span><br><span class="line">        • optval	保存要更改的选项信息的缓冲地址值</span><br><span class="line">        • optlen	向第四个参数(optval)传递的可选项信息的字节数。</span><br></pre></td></tr></table></figure>

<ul>
<li><p><em><strong>Example: (setsockopt())</strong></em></p>
<blockquote>
<p>sock_type.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handing</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tcp_sock, udp_sock;</span><br><span class="line">    <span class="type">int</span> sock_type;</span><br><span class="line">    <span class="type">socklen_t</span> optlen;</span><br><span class="line">    <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    optlen = <span class="built_in">sizeof</span>(sock_type);</span><br><span class="line">    tcp_sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    udp_sock = <span class="built_in">socket</span>(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SOCK_STREAM: %d\n&quot;</span>, SOCK_STREAM);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SOCK_DGRAM: %d\n&quot;</span>, SOCK_DGRAM);</span><br><span class="line"></span><br><span class="line">    state = <span class="built_in">getsockopt</span>(tcp_sock, SOL_SOCKET, SO_TYPE, (<span class="type">void</span>*)&amp;sock_type, &amp;optlen);</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handing</span>(<span class="string">&quot;getsockopt error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Socket type one: %d\n&quot;</span>, sock_type);</span><br><span class="line"></span><br><span class="line">    state = <span class="built_in">getsockopt</span>(udp_sock, SOL_SOCKET, SO_TYPE, (<span class="type">void</span>*)&amp;sock_type, &amp;optlen);</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handing</span>(<span class="string">&quot;getsockopt error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Socket type two: %d\n&quot;</span>, sock_type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result：</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# vi sock_type.cpp</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# g++ sock_type.cpp -o sock_type</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# ./sock_type </span><br><span class="line">SOCK_STREAM: 1</span><br><span class="line">SOCK_DGRAM: 2</span><br><span class="line">Socket type one: 1</span><br><span class="line">Socket type two: 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是TCP套接字，SOCK_STREAM常数值1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是UDP套接字，SPCK_DGRAM常数值2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于验证套接字类型的SO_TYPE是只读可选项(套接字类型只能在创建时决定，以后不再能改变)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-SO-SNDBUF-SO-RCVBUF"><a href="#3-SO-SNDBUF-SO-RCVBUF" class="headerlink" title="3. SO_SNDBUF &amp;&amp; SO_RCVBUF"></a>3. SO_SNDBUF &amp;&amp; SO_RCVBUF</h2><p>​    创建套接字将同时生成 <strong>I&#x2F;O</strong> 缓冲区，接下来介绍 **I&#x2F;O **缓冲区相关可选项。</p>
<ul>
<li><p><strong>SO_RCVBUF</strong> 是输入缓冲区大小相关可选项</p>
</li>
<li><p><strong>SO_SNDBUF</strong> 是输出缓冲区大小相关可选项</p>
<p><em><strong>Example(读取 I&#x2F;O 大小):</strong></em></p>
<blockquote>
<p>get_buf.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="type">int</span> snd_buf, rcv_buf, state;</span><br><span class="line">    <span class="type">socklen_t</span> len;</span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    len = <span class="built_in">sizeof</span>(snd_buf);</span><br><span class="line"></span><br><span class="line">    state = <span class="built_in">getsockopt</span>(sock, SOL_SOCKET, SO_SNDBUF, (<span class="type">void</span>*)&amp;snd_buf, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;getsockopt error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len = <span class="built_in">sizeof</span>(rcv_buf);</span><br><span class="line">    state = <span class="built_in">getsockopt</span>(sock, SOL_SOCKET, SO_RCVBUF, (<span class="type">void</span>*)&amp;rcv_buf, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;getsockopt error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input buffer size: %d\n&quot;</span>, rcv_buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Output buffer size: %d\n&quot;</span>, snd_buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# vi get_buf.cpp</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# g++ get_buf.cpp -o get_buf</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# ./get_buf </span><br><span class="line">Input buffer size: 131072</span><br><span class="line">Output buffer size: 16384</span><br></pre></td></tr></table></figure>

<p><em><strong>Example(更改 I&#x2F;O 大小):</strong></em></p>
<blockquote>
<p>set_buf.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="type">int</span> snd_buf = <span class="number">1024</span> * <span class="number">3</span>, rcv_buf = <span class="number">1024</span> * <span class="number">3</span>; <span class="comment">// 设置为 3k</span></span><br><span class="line">    <span class="type">int</span> state;</span><br><span class="line">    <span class="type">socklen_t</span> len;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更改缓冲区大小</span></span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    state = <span class="built_in">setsockopt</span>(sock, SOL_SOCKET, SO_RCVBUF, (<span class="type">void</span> *)&amp;rcv_buf, <span class="built_in">sizeof</span>(rcv_buf));</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;setsockopt() error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    state = <span class="built_in">setsockopt</span>(sock, SOL_SOCKET, SO_SNDBUF, (<span class="type">void</span> *)&amp;snd_buf, <span class="built_in">sizeof</span>(snd_buf));</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;setsockopt() error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取缓冲区大小</span></span><br><span class="line">    len = <span class="built_in">sizeof</span>(snd_buf);</span><br><span class="line">    state = <span class="built_in">getsockopt</span>(sock, SOL_SOCKET, SO_SNDBUF, (<span class="type">void</span> *)&amp;snd_buf, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;getsockopt() error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len = <span class="built_in">sizeof</span>(rcv_buf);</span><br><span class="line">    state = <span class="built_in">getsockopt</span>(sock, SOL_SOCKET, SO_RCVBUF, (<span class="type">void</span> *)&amp;rcv_buf, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;getsockopt() error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input buffer size: %d \n&quot;</span>, rcv_buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Output buffer size: %d \n&quot;</span>, snd_buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# g++ set_buf.cpp -o set_buf</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter09# ./set_buf </span><br><span class="line">Input buffer size: 6144 </span><br><span class="line">Output buffer size: 6144</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓冲区的设置需要谨慎处理，因此不会完全按照我们的要求进行</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-SO-REUSEADDR"><a href="#4-SO-REUSEADDR" class="headerlink" title="4. SO_REUSEADDR"></a>4. SO_REUSEADDR</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, client_sock;</span><br><span class="line">    <span class="type">char</span> message[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> option, str_len;</span><br><span class="line">    <span class="type">socklen_t</span> optlen, client_addr_sz;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr, client_addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;socket() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    optlen = <span class="built_in">sizeof</span>(option);</span><br><span class="line">    option = TRUE;</span><br><span class="line">    <span class="built_in">setsockopt</span>(serv_sock, SOL_SOCKET, SO_REUSEADDR, (<span class="type">void</span>*)&amp;option, optlen);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;bind() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;listen error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client_addr_sz = <span class="built_in">sizeof</span>(client_addr);</span><br><span class="line">    client_sock = <span class="built_in">accept</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;client_addr, &amp;client_addr_sz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((str_len = <span class="built_in">read</span>(client_sock, message, <span class="built_in">sizeof</span>(message))) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write</span>(client_sock, message, str_len);</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">1</span>, message, str_len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(client_sock);</span><br><span class="line">    <span class="built_in">close</span>(serv_sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>​        在主机A的四次握手过程中，如果最后的数据丢失，则主机B会认为主机A未收到自己发送的FIN消息，因此重传。这时，收到FIN消息的主机A将重启Time-wait计时器。因此，如果网络状况不理想，Time-wait状态将持续。</p>
<p>​		解决方案就是在套接字的可选项中更改SO_REUSEADDR的状态。适当调整该参数，可将Time-wait状态下的套接字端口号重新分配给新的套接字。SO_REUSEADDR的默认值为0(假)，这就意味着无法分配Time-wait状态下的套接字端口号。因此需要将这个值改成1(真)。具体做法为上述代码中的 <font color=red>39-41行。</font></p>
</blockquote>
<h2 id="5-TCP-NODELAY"><a href="#5-TCP-NODELAY" class="headerlink" title="5. TCP_NODELAY"></a>5. TCP_NODELAY</h2><h3 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h3><p>​		TCP套接字默认使用Nagle算法，因此最大限度的进行缓冲，直到收到ACK。</p>
<p>如下图左侧：</p>
<p>​		为了发送字符串”Nagle”，将其传递到输出缓冲区。这时头字符’N’之前没有其他数据(没有需接收的ACK)，因此立即传输。之后开始等待字符’N’的ACK消息，等待过程中，剩下的”agle”填入缓冲。接下来，收到字符’N’的ACK消息后，将输出缓冲区的”agle”装入一个数据包发送。也就是说，<font color=orange>一共需要4个数据包以传输1个字符串</font></p>
<p>​		</p>
<p>如下图右侧：</p>
<p>​		对于未使用Nagle算法时发送字符串”Nagle”：假设字符’N’到’e’依次传到输入缓冲区。此时的发送过程与ACK接受与否无关，因此数据到达缓冲区后将立即被发送出去。从图中可以看到，发送字符串”Nagle”一共需要10个数据包。</p>
<p>​		<font color=green>因此，不使用Nagle算法将对网络流量产生负面影响。即使只传输1个字节的数据，其头信息都有可能是几十个字节。因此为了提高网络传输效率，必须使用Nagle算法。但Nagle算法并不是什么时候都适应。根据传输数据的特性，网络流量未受太大影响时，不使用Nagle算法要比使用它时传输速度快。</font></p>
<p>​		<font color=blue>一般情况下，不使用Nagle算法可以提高传输速度。但如果无条件放弃使用Nagle算法，就会增加过多的网络流量，反而会影响传输。</font></p>
<p><img src="/../picture/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%8F%AF%E9%80%89%E9%A1%B9/5c42e12abc5b8.png" alt="5c42e12abc5b8"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="禁用Nagle算法"><a href="#禁用Nagle算法" class="headerlink" title="禁用Nagle算法"></a>禁用Nagle算法</h3><p>​		只需要将套接字可选项TCP_NODELAY改为1(真)即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> opt_val = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setsockopt</span>(sock, IPPROTO_TCP, ICP_NODELAY, (<span class="type">void</span>*)&amp;opt_val, <span class="built_in">sizeof</span>(opt_val));</span><br></pre></td></tr></table></figure>

<p>​		可以通过TCP_NODELAY的值查看Nagle算法的设置状态。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> opt_val;</span><br><span class="line"><span class="type">socklen_t</span> opt_len;</span><br><span class="line">opt_len = <span class="built_in">sizeof</span>(opt_val);</span><br><span class="line"><span class="built_in">getsockopt</span>(sock, IPPROTO_TCP, ICP_NODELAY, (<span class="type">void</span>*)&amp;opt_val, &amp;opt_val);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>生成器使用</title>
    <url>/2024/07/14/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="正确配置启动项目-显示验证码即为正常"><a href="#正确配置启动项目-显示验证码即为正常" class="headerlink" title="正确配置启动项目(显示验证码即为正常)"></a>正确配置启动项目(显示验证码即为正常)</h3><p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613105922984.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="创建数据表并插入数据"><a href="#创建数据表并插入数据" class="headerlink" title="创建数据表并插入数据"></a>创建数据表并插入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE renren_security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_goods (</span><br><span class="line">  id <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品ID&#x27;</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;商品名&#x27;</span>,</span><br><span class="line">  intro <span class="type">varchar</span>(<span class="number">500</span>) COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">  price <span class="type">int</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  num <span class="type">int</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">  creator <span class="type">bigint</span> COMMENT <span class="string">&#x27;创建者&#x27;</span>,</span><br><span class="line">  create_date datetime COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;商品管理&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="运行-renren-generator-下的-GeneratorApplication，浏览器访问"><a href="#运行-renren-generator-下的-GeneratorApplication，浏览器访问" class="headerlink" title="运行  renren-generator 下的 GeneratorApplication，浏览器访问"></a>运行  renren-generator 下的 GeneratorApplication，浏览器访问</h3><p><a href="http://localhost:8082/renren-generator/#generator.html">http://localhost:8082/renren-generator/#generator.html</a></p>
<p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613110145816.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="下载完代码后："><a href="#下载完代码后：" class="headerlink" title="下载完代码后："></a>下载完代码后：</h3><p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613110324170.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="复制下载代码中的-main-文件夹："><a href="#复制下载代码中的-main-文件夹：" class="headerlink" title="复制下载代码中的 main 文件夹："></a>复制下载代码中的 main 文件夹：</h3><p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613110500553.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="运行-AdminApplication"><a href="#运行-AdminApplication" class="headerlink" title="运行 AdminApplication"></a>运行 AdminApplication</h3><h3 id="复制-vue-文件夹中的-demo-文件夹到-RENREN-UI文件夹下的-views"><a href="#复制-vue-文件夹中的-demo-文件夹到-RENREN-UI文件夹下的-views" class="headerlink" title="复制  vue 文件夹中的 demo 文件夹到 RENREN-UI文件夹下的 views"></a>复制  vue 文件夹中的 demo 文件夹到 RENREN-UI文件夹下的 views</h3><p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613110643392.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="修改路由文件"><a href="#修改路由文件" class="headerlink" title="修改路由文件"></a>修改路由文件</h3><p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613110711758.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&quot;@/layout/layout.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Error</span> <span class="keyword">from</span> <span class="string">&quot;@/views/error.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;@/views/login.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Iframe</span> <span class="keyword">from</span> <span class="string">&quot;@/views/iframe.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Goods</span> <span class="keyword">from</span> <span class="string">&quot;@/views/demo/goods.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GoodsAdd</span> <span class="keyword">from</span> <span class="string">&quot;@/views/demo/goods-add-or-update.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 框架基础路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;工作台&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;icon-desktop&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/home.vue&quot;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;主页&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;icon-home&quot;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Goods</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;商品管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;icon-goods&quot;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/goods/add&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">GoodsAdd</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;添加或更新商品&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;icon-goods-add&quot;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Login</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;登录&quot;</span>, <span class="attr">isNavigationMenu</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/password&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/sys/user-update-password.vue&quot;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;修改密码&quot;</span>, <span class="attr">requiresAuth</span>: <span class="literal">true</span>, <span class="attr">isNavigationMenu</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/iframe/:id?&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Iframe</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;iframe&quot;</span>, <span class="attr">isNavigationMenu</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/error&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Error</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;错误页面&quot;</span>, <span class="attr">isNavigationMenu</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">errorRoute</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:path(.*)*&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: &#123; <span class="attr">path</span>: <span class="string">&quot;/error&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">to</span>: <span class="number">404</span> &#125;, <span class="attr">replace</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">isNavigationMenu</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器登录-点击商品管理"><a href="#浏览器登录-点击商品管理" class="headerlink" title="浏览器登录  点击商品管理"></a>浏览器登录  点击商品管理</h3><p><img src="/../picture/%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/image-20240613110831529.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>进程间通信</title>
    <url>/2024/07/23/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h3 id="1-进程间通信的基本概念"><a href="#1-进程间通信的基本概念" class="headerlink" title="1. 进程间通信的基本概念"></a>1. 进程间通信的基本概念</h3><p>​		进程间通信(Inter Process Communication)意味着两个不同的进程间可以交换数据，为了这一点，操作系统中应该提供两个进程可以同时访问的内存空间。</p>
<h3 id="2-通过管道实现进程间通信"><a href="#2-通过管道实现进程间通信" class="headerlink" title="2. 通过管道实现进程间通信"></a>2. 通过管道实现进程间通信</h3><p><img src="/../picture/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20240722231219710.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		</p>
<p>​		为了完成进程间的通信，需要创建管道。管道并非属于进程间的资源，而是和套接字一样，属于操作系统（也就不是fork函数复制的对象）。所以，两个进程通过操作系统提供的内存空间进行通信。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pipe</span><span class="params">(<span class="type">int</span> filedes[<span class="number">2</span>])</span></span>;</span><br><span class="line">	-&gt; 成功返回<span class="number">0</span>，失败返回<span class="number">-1</span></span><br><span class="line">        • filedes[<span class="number">0</span>]	通过管道 接收 数据时使用的文件描述符，即管道出口</span><br><span class="line">        • filedes[<span class="number">1</span>]	通过管道 传输 数据时使用的文件描述符，即管道入口</span><br></pre></td></tr></table></figure>

<p><font color=Aqua>		以长度为2的int数组地址值作为参数调用上述函数时，数组中存有两个文件描述符，它们将被用作管道的出口和入口。父进程调用该函数时将创建管道，同时获取对应于出入口的文件描述符，此时父进程可以读写同一管道。但父进程的目的是与子进程进行数据交换，因此需要将入口或出口中的1个文件描述符传递给子进程。如何完成传递呢?答案就是调用fork函数。</font></p>
<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fds[<span class="number">2</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> str[] = <span class="string">&quot;Who are you?&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 pipe 函数创建管道，fds 数组中保存用于I/O的文件描述符</span></span><br><span class="line">    <span class="built_in">pipe</span>(fds);</span><br><span class="line">    pid = fork(); <span class="comment">// 子进程将同时拥有创建管道获取的2个文件描述符，复制的并非管道，而是文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write</span>(fds[<span class="number">1</span>], str, <span class="built_in">sizeof</span>(str));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fds[<span class="number">0</span>], buf, BUFF_SIZE);</span><br><span class="line">        std::cout &lt;&lt; buf &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# g++ pipe1.cpp -o pipe1</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# ./pipe1 </span><br><span class="line">Who are you?</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20240722232150577.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="3-通过管道进行进程间双向通信"><a href="#3-通过管道进行进程间双向通信" class="headerlink" title="3. 通过管道进行进程间双向通信"></a>3. 通过管道进行进程间双向通信</h3><p><img src="/../picture/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20240722232514373.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		<font color=Greenyellow>通过一个管道也可以进行双向通信，但是采用这种模型需要格格外注意。</font></p>
<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fds[<span class="number">2</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> str1[] = <span class="string">&quot;Who are you?&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> str2[] = <span class="string">&quot;Thank you for your message!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[BUFF_SIZE];</span><br><span class="line">    </span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="built_in">pipe</span>(fds);</span><br><span class="line">    pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write</span>(fds[<span class="number">1</span>], str1, <span class="built_in">sizeof</span>(str1));</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">read</span>(fds[<span class="number">0</span>], buf, BUFF_SIZE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child proc output: %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fds[<span class="number">0</span>], buf, BUFF_SIZE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent proc output: %s\n&quot;</span>, buf);</span><br><span class="line">        <span class="built_in">write</span>(fds[<span class="number">1</span>], str2, <span class="built_in">sizeof</span>(str2));</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# g++ pipe2.cpp -o pipe2</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# ./pipe2 </span><br><span class="line">Parent proc output: Who are you?</span><br><span class="line">Child proc output: Thank you for your message!</span><br></pre></td></tr></table></figure>

<p><font color=red>WARNING: 当注释掉第20行sleep(2)后程序会卡死。</font></p>
<p><font color=SkyBlue>		分析: 产生的原因是”向管道传递数据时，先读的进程会把数据读走“。即数据进入管道后成为无助无主数据，也就是通过 read 函数先读取数据的进程先得到数据，即使该进程将数据传到了管道。</font></p>
<p><img src="/../picture/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20240722234804043.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>因此可以通过创建 <strong>两个管道</strong> 进行进程间的通信。</p>
<p><em><strong>Example:</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fds1[<span class="number">2</span>], fds2[<span class="number">2</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> str1[] = <span class="string">&quot;Who are you?&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> str2[] = <span class="string">&quot;Thank you for your message!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[BUFF_SIZE];</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pipe</span>(fds1), <span class="built_in">pipe</span>(fds2);</span><br><span class="line">    pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write</span>(fds1[<span class="number">1</span>], str1, <span class="built_in">sizeof</span>(str1));</span><br><span class="line">        <span class="built_in">read</span>(fds2[<span class="number">0</span>], buf, BUFF_SIZE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child proc output: %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fds1[<span class="number">0</span>], buf, BUFF_SIZE);</span><br><span class="line">        <span class="built_in">write</span>(fds2[<span class="number">1</span>], str2, <span class="built_in">sizeof</span>(str2));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent proc output: %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# g++ pipe3.cpp -o pipe3</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# ./pipe3 </span><br><span class="line">Parent proc output: Who are you?</span><br><span class="line">Child proc output: Thank you for your message!</span><br></pre></td></tr></table></figure>



<h2 id="4-保存消息的回声服务器端"><a href="#4-保存消息的回声服务器端" class="headerlink" title="4. 保存消息的回声服务器端"></a>4. 保存消息的回声服务器端</h2><p><em><strong>Example:</strong></em></p>
<blockquote>
<p>echo_storeserv.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 300</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_childproc</span><span class="params">(<span class="type">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    pid = <span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;status, WNOHANG);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;removed proc id: %d\n&quot;</span>, pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr, clnt_addr;</span><br><span class="line">    <span class="type">int</span> fds[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> act;</span><br><span class="line">    <span class="type">socklen_t</span> addr_sz;</span><br><span class="line">    <span class="type">int</span> str_len, state;</span><br><span class="line">    <span class="type">char</span> buf[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    act.sa_handler = read_childproc;</span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 注册信号器，把成功的返回值给 state</span></span><br><span class="line">    state = <span class="built_in">sigaction</span>(SIGCHLD, &amp;act, <span class="number">0</span>); </span><br><span class="line">   </span><br><span class="line">    serv_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">error_handling</span>(<span class="string">&quot;bind() error!&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;listen() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pipe</span>(fds);</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;echomsg.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>);</span><br><span class="line">        <span class="type">char</span> msgbuf[BUFF_SIZE];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="built_in">read</span>(fds[<span class="number">0</span>], msgbuf, BUFF_SIZE);</span><br><span class="line">            <span class="built_in">fwrite</span>((<span class="type">void</span>*)msgbuf, <span class="number">1</span>, len, fp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        addr_sz = <span class="built_in">sizeof</span>(clnt_addr);</span><br><span class="line">        clnt_sock = <span class="built_in">accept</span>(serv_sock, (<span class="keyword">struct</span> sockaddr*)&amp;clnt_addr, &amp;addr_sz);</span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;new clinet connected...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pid = fork(); <span class="comment">// 此时，父子进程分别带有一个套接字</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) <span class="comment">// 提进程运行区域，此部分向客户端提供回声服务器</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(serv_sock);</span><br><span class="line">            <span class="keyword">while</span> ((str_len = <span class="built_in">read</span>(clnt_sock, buf, BUFF_SIZE)) != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">write</span>(clnt_sock, buf, str_len);</span><br><span class="line">                <span class="built_in">write</span>(fds[<span class="number">1</span>], buf, str_len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">close</span>(clnt_sock);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;client disconnected...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 通过 accept 函数创建的套接字文件描述符已经复制给子进程，因为服务器端要销毁自己拥有的</span></span><br><span class="line">            <span class="built_in">close</span>(clnt_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>echo_mpclient.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_handling</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, stderr);</span><br><span class="line">    <span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_routine</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> str_len = <span class="built_in">read</span>(sock, buf, BUFF_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (str_len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buf[str_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Message from server: %s&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_routine</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fgets</span>(buf, BUFF_SIZE, stdin);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(buf, <span class="string">&quot;q\n&quot;</span>) || !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;Q\n&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 向服务器传递EOF，因为fork函数复制了文件描述组，所以调用1次close不够</span></span><br><span class="line">            <span class="built_in">shutdown</span>(sock, SHUT_WR); </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">write</span>(sock, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">char</span> buff[BUFF_SIZE];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;IP&gt; &lt;port&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">2</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">error_handling</span>(<span class="string">&quot;connect() error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_routine</span>(sock, buff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read_routine</span>(sock, buff);</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">close</span>(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>Result:</strong></em></p>
<blockquote>
<p>server</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# g++ echo_storeserv.cpp -o server</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter11# ./server 9190</span><br><span class="line">new clinet connected...</span><br><span class="line">removed proc id: 2403</span><br><span class="line">client disconnected...</span><br><span class="line">removed proc id: 2410</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看txt文件，客户端发送的数据已经写入到文件</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>client -&gt; 客户端需要连续发10次数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# g++ echo_mpclient.cpp -o client</span><br><span class="line">root@jarryli:/home/jarryli/code/tcp_ip/chapter10# ./client 127.0.0.1 9190</span><br><span class="line">demo1</span><br><span class="line">Message from server: demo1</span><br><span class="line">demo2</span><br><span class="line">Message from server: demo2</span><br><span class="line">demo3</span><br><span class="line">Message from server: demo3</span><br><span class="line">demo4</span><br><span class="line">Message from server: demo4</span><br><span class="line">demo5</span><br><span class="line">Message from server: demo5</span><br><span class="line">demo6</span><br><span class="line">Message from server: demo6</span><br><span class="line">demo7</span><br><span class="line">Message from server: demo7</span><br><span class="line">demo8</span><br><span class="line">Message from server: demo8</span><br><span class="line">demo9</span><br><span class="line">Message from server: demo9</span><br><span class="line">demo10</span><br><span class="line">Message from server: demo10</span><br><span class="line">q</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>常用的 Git 命令</title>
    <url>/2024/09/02/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="常用的-Git-命令"><a href="#常用的-Git-命令" class="headerlink" title="常用的 Git 命令"></a>常用的 Git 命令</h1><h2 id="1-将本地项目推送到远程仓库"><a href="#1-将本地项目推送到远程仓库" class="headerlink" title="1. 将本地项目推送到远程仓库"></a>1. 将本地项目推送到远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init # 初始化</span><br><span class="line">git remote -v # 查看已经关联的地址</span><br><span class="line">git add . # 添加本地仓库</span><br><span class="line">git commit -m &quot;第一次提交&quot; # 提交说明</span><br><span class="line">git remote add origin xxx # 关联远程仓库</span><br><span class="line">git pull --rebase origin master # 同步本地与远程仓库(如果是远程仓库是空,则可以不执行)</span><br><span class="line">git push -u origin master # 提交远程仓库 -f: 强制推送至远程</span><br></pre></td></tr></table></figure>

<h2 id="2-Git-回退到某个历史版本"><a href="#2-Git-回退到某个历史版本" class="headerlink" title="2. Git 回退到某个历史版本"></a>2. Git 回退到某个历史版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log # 查看历史</span><br><span class="line">git reset --hard xxxxxx # xxx为版本号</span><br><span class="line">git push -f -u origin master / git push -f # 推送修改</span><br></pre></td></tr></table></figure>

<h2 id="3-修改项目关联远程地址方法"><a href="#3-修改项目关联远程地址方法" class="headerlink" title="3. 修改项目关联远程地址方法"></a>3. 修改项目关联远程地址方法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin &lt;url&gt; # 修改</span><br><span class="line">手动去修改项目中.git文件夹下,编辑config配置文件中的url</span><br></pre></td></tr></table></figure>

<h2 id="4-Git-修改分支的名称"><a href="#4-Git-修改分支的名称" class="headerlink" title="4. Git 修改分支的名称"></a>4. Git 修改分支的名称</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要将分支 br_old 修改为 br_new</span></span><br><span class="line"></span><br><span class="line">git checkout br_old # 切换分支</span><br><span class="line">git pull origin br_old # 将代码更新到和远程仓库一直</span><br><span class="line">git branch -m br_old br_new # 将分支 br_old 重命名为 br_new</span><br><span class="line">git push --set-upstream origin br_new # 将本地分支push到远程仓库</span><br><span class="line">git push origin --delete br_old # 删除远程分支 br_old</span><br></pre></td></tr></table></figure>

<h2 id="5-Git-删除分支"><a href="#5-Git-删除分支" class="headerlink" title="5. Git 删除分支"></a>5. Git 删除分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">现在在 demo 分支上,想删除 demo 分支:</span></span><br><span class="line"></span><br><span class="line">git checkout master # 切换到别的分支</span><br><span class="line">git branch -d demo # 删除本地分支</span><br><span class="line">git branch -D demo # 如果删除不了,可以强制删除</span><br><span class="line">git push origin --delete demo # 删除远程分支(慎用)</span><br></pre></td></tr></table></figure>

<h2 id="6-master-分支代码复制到新的分支"><a href="#6-master-分支代码复制到新的分支" class="headerlink" title="6. master 分支代码复制到新的分支"></a>6. master 分支代码复制到新的分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch demo # 创建新的分支 demo</span><br><span class="line">git checkout demo # 切换到需要合并的分支</span><br><span class="line">git merge master # 将 master 分支合并到当前分支</span><br><span class="line">git push origin demo # 推送至远程仓库</span><br></pre></td></tr></table></figure>

<h2 id="7-Git-迁移项目到其他代码仓库-且保留分支与提交记录"><a href="#7-Git-迁移项目到其他代码仓库-且保留分支与提交记录" class="headerlink" title="7. Git 迁移项目到其他代码仓库,且保留分支与提交记录"></a>7. Git 迁移项目到其他代码仓库,且保留分支与提交记录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --bare ssh://需要迁移的项目地址/项目.git</span><br><span class="line">cd 项目.git</span><br><span class="line">git push --mirror ssh://其它代码仓库地址/新的项目名.git</span><br></pre></td></tr></table></figure>

<h2 id="8-Git-相关命令操作"><a href="#8-Git-相关命令操作" class="headerlink" title="8. Git 相关命令操作"></a>8. Git 相关命令操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a # 查看所有分支</span><br><span class="line">git branch # 查看本地分支</span><br><span class="line">git branch -r # 查看远程分支</span><br><span class="line">git branch &lt;分支名&gt; # 创建本地新分支</span><br><span class="line">git checkout &lt;分支名&gt; # 切换分支</span><br><span class="line">git push origin -u &lt;分支名&gt; # 将本地分支推送到线上</span><br><span class="line">git merge[name] # 将名称为 [name] 的分支与当前分支合并</span><br><span class="line">git clone -b demo 项目地址 # 克隆 demo 分支的代码</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>STM32F103C8T6(源码1-5)</title>
    <url>/2024/09/17/STM32F103C8T6(%E6%BA%90%E7%A0%811-5)/</url>
    <content><![CDATA[<h1 id="STM32F103C8T6-源码1-5"><a href="#STM32F103C8T6-源码1-5" class="headerlink" title="STM32F103C8T6(源码1-5)"></a>STM32F103C8T6(源码1-5)</h1><h2 id="1-点灯大师"><a href="#1-点灯大师" class="headerlink" title="1. 点灯大师"></a>1. 点灯大师</h2><blockquote>
<p>led.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LED_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__LED_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>led.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE(); <span class="comment">// 开启时钟</span></span><br><span class="line">    GPIO_InitTypeDef gpio_initStructure;</span><br><span class="line">    gpio_initStructure.Pin = GPIO_PIN_8;</span><br><span class="line">    gpio_initStructure.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    gpio_initStructure.Pull = GPIO_PULLUP;</span><br><span class="line">    gpio_initStructure.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOB, &amp;gpio_initStructure);</span><br><span class="line">    </span><br><span class="line">    led1_off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uart1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();                         <span class="comment">/* 初始化HAL库 */</span></span><br><span class="line">    stm32_clock_init(RCC_PLL_MUL9); <span class="comment">/* 设置时钟, 72Mhz */</span></span><br><span class="line">    led_init();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        led1_on();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">        led1_off();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/STM32F103C8T6/image-20240917162658238.png" alt="image-20240917162658238"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="2-流水灯"><a href="#2-流水灯" class="headerlink" title="2. 流水灯"></a>2. 流水灯</h2><blockquote>
<p>led.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LED_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__LED_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>led.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE(); <span class="comment">// 开启时钟</span></span><br><span class="line">    GPIO_InitTypeDef gpio_initStructure;</span><br><span class="line">    gpio_initStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9;</span><br><span class="line">    gpio_initStructure.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    gpio_initStructure.Pull = GPIO_PULLUP;</span><br><span class="line">    gpio_initStructure.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOB, &amp;gpio_initStructure);</span><br><span class="line">    </span><br><span class="line">    led1_off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uart1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();                         <span class="comment">/* 初始化HAL库 */</span></span><br><span class="line">    stm32_clock_init(RCC_PLL_MUL9); <span class="comment">/* 设置时钟, 72Mhz */</span></span><br><span class="line">    led_init();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        led1_on();</span><br><span class="line">        led2_off();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">        led1_off();</span><br><span class="line">        led2_on();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/STM32F103C8T6/image-20240917162704120.png" alt="image-20240917162704120"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="3-蜂鸣器"><a href="#3-蜂鸣器" class="headerlink" title="3. 蜂鸣器"></a>3. 蜂鸣器</h2><blockquote>
<p>beep.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __BEEP_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __BEEP_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__BEEP_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>beep.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;beep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">    GPIO_InitTypeDef gpio_initStruct;</span><br><span class="line">    gpio_initStruct.Pin = GPIO_PIN_8;</span><br><span class="line">    gpio_initStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    gpio_initStruct.Pull = GPIO_PULLUP; <span class="comment">// 低电平打通 -&gt; 默认高电平</span></span><br><span class="line">    gpio_initStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOB, &amp;gpio_initStruct);</span><br><span class="line">    </span><br><span class="line">    beep_off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uart1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;beep.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();                         <span class="comment">/* 初始化HAL库 */</span></span><br><span class="line">    stm32_clock_init(RCC_PLL_MUL9); <span class="comment">/* 设置时钟, 72Mhz */</span></span><br><span class="line">    beep_init();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        beep_on();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">        beep_off();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/STM32F103C8T6/IMG_20240917_163058.jpg" alt="IMG_20240917_163058"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="4-按键实验"><a href="#4-按键实验" class="headerlink" title="4. 按键实验"></a>4. 按键实验</h2><blockquote>
<p>led.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LED_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__LED_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>led.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">    GPIO_InitTypeDef gpioInitStruct;</span><br><span class="line">    gpioInitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;</span><br><span class="line">    gpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    gpioInitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">    gpioInitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOB, &amp;gpioInitStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭led灯</span></span><br><span class="line">    led1_off();</span><br><span class="line">    led2_off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>key.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __KEY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __KEY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">key_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">key_scan</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__KEY_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>key.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">key_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    GPIO_InitTypeDef gpioInitStruct;</span><br><span class="line">    gpioInitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;</span><br><span class="line">    gpioInitStruct.Mode = GPIO_MODE_INPUT; <span class="comment">// 输入模式</span></span><br><span class="line">    gpioInitStruct.Pull = GPIO_PULLUP; <span class="comment">// 低电平打通 -&gt; 默认上拉</span></span><br><span class="line">    gpioInitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;gpioInitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">key_scan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 检查按键是否按下</span></span><br><span class="line">    <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 消抖</span></span><br><span class="line">        delay_ms(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 再次判断按键是否按下</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果按键按下，等待松开</span></span><br><span class="line">            <span class="keyword">while</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 返回按键的值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)</span><br><span class="line">    &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();                         <span class="comment">/* 初始化HAL库 */</span></span><br><span class="line">    stm32_clock_init(RCC_PLL_MUL9);     <span class="comment">/* 设置时钟, 72Mhz */</span></span><br><span class="line">    </span><br><span class="line">    led_init();</span><br><span class="line">    key_init();</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint8_t</span> keyNum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        keyNum = key_scan();</span><br><span class="line">        <span class="keyword">if</span> (keyNum == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            led1_toggle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (keyNum == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            led2_toggle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/STM32F103C8T6/image-20240917172050786.png" alt="image-20240917172050786"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="5-中断实验"><a href="#5-中断实验" class="headerlink" title="5. 中断实验"></a>5. 中断实验</h2><blockquote>
<p>led.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LED_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_toggle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__LED_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>led.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化GPIO函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef gpio_initstruct;</span><br><span class="line">    <span class="comment">//打开时钟</span></span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE();                           <span class="comment">// 使能GPIOB时钟</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用GPIO初始化函数</span></span><br><span class="line">    gpio_initstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;          <span class="comment">// 两个LED对应的引脚</span></span><br><span class="line">    gpio_initstruct.Mode = GPIO_MODE_OUTPUT_PP;             <span class="comment">// 推挽输出</span></span><br><span class="line">    gpio_initstruct.Pull = GPIO_PULLUP;                     <span class="comment">// 上拉</span></span><br><span class="line">    gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;           <span class="comment">// 高速</span></span><br><span class="line">    HAL_GPIO_Init(GPIOB, &amp;gpio_initstruct);</span><br><span class="line">    <span class="comment">//关闭LED</span></span><br><span class="line">    led1_off();</span><br><span class="line">    led2_off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点亮LED1的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);   <span class="comment">// 拉低LED1引脚，点亮LED1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//熄灭LED1的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);     <span class="comment">// 拉高LED1引脚，熄灭LED1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转LED1状态的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led1_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点亮LED2的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);   <span class="comment">// 拉低LED2引脚，点亮LED2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//熄灭LED2的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);     <span class="comment">// 拉高LED2引脚，熄灭LED2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转LED2状态的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led2_toggle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>exti.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __EXIT_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EXIT_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exti_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !__EXIT_H__</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>exit.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exti_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    GPIO_InitTypeDef gpioInitStruct;</span><br><span class="line">    gpioInitStruct.Pin = GPIO_PIN_0;</span><br><span class="line">    gpioInitStruct.Mode = GPIO_MODE_IT_FALLING; <span class="comment">// 下降沿触发</span></span><br><span class="line">    gpioInitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">    gpioInitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;gpioInitStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *   EXTI0_IRQn：表示中断源，EXTI0_IRQn 是外部中断线0的中断请求号。</span></span><br><span class="line"><span class="comment">      *   2：表示中断优先级组中的优先级。STM32 微控制器通常支持多级优先级，这个参数决定了中断的优先级。数字越小优先级越高。</span></span><br><span class="line"><span class="comment">      *   0：表示中断的子优先级，在优先级组中进一步细分。通常，0 代表最高子优先级。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI0_IRQn, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使能中断源</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI0_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span> <span class="comment">// 回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里的延时只是为了消抖，正常的中断是不能延时的</span></span><br><span class="line">    delay_ms(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == GPIO_PIN_0)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == <span class="comment">/* 0 */</span> GPIO_PIN_RESET)</span><br><span class="line">        &#123;</span><br><span class="line">            led1_toggle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uart1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;exti.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();                         <span class="comment">/* 初始化HAL库 */</span></span><br><span class="line">    stm32_clock_init(RCC_PLL_MUL9); <span class="comment">/* 设置时钟, 72Mhz */</span></span><br><span class="line">    led_init();</span><br><span class="line">    exti_init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        led2_on();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">        led2_off();</span><br><span class="line">        delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/STM32F103C8T6/IMG_20240917_175242.jpg" alt="IMG_20240917_175242"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/20/Android%20Studio%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E6%BA%90%E5%8F%8A%E4%BF%AE%E6%94%B9gradle%E5%8C%85%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Android-Studio配置阿里源及修改gradle包的位置"><a href="#Android-Studio配置阿里源及修改gradle包的位置" class="headerlink" title="Android Studio配置阿里源及修改gradle包的位置"></a>Android Studio配置阿里源及修改gradle包的位置</h1><h2 id="1-下载所需的包"><a href="#1-下载所需的包" class="headerlink" title="1. 下载所需的包"></a>1. 下载所需的包</h2><h3 id="1-1-找到-gradle-gradle-wrapper-properties-，替换-distributionUrl-中的内容"><a href="#1-1-找到-gradle-gradle-wrapper-properties-，替换-distributionUrl-中的内容" class="headerlink" title="1.1 找到 **gradle\gradle-wrapper.properties **，替换 distributionUrl 中的内容"></a>1.1 找到 **gradle\gradle-wrapper.properties **，替换 <strong>distributionUrl</strong> 中的内容</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我这里使用的是腾讯的，也可以使用阿里的</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://mirrors.cloud.tencent.com/gradle/gradle-8.7-bin.zip</span></span><br></pre></td></tr></table></figure>

<p><img src="/../picture/Android/image-20240920220018165.png" alt="image-20240920220018165"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="1-2-找到根目录下的-settings-gradle-kts-文件，替换文件中的全部内容"><a href="#1-2-找到根目录下的-settings-gradle-kts-文件，替换文件中的全部内容" class="headerlink" title="1.2 找到根目录下的 settings.gradle.kts 文件，替换文件中的全部内容"></a>1.2 找到根目录下的 <strong>settings.gradle.kts</strong> 文件，替换文件中的全部内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">//下面三个是我们自己加的</span></span><br><span class="line">        maven &#123; url = uri(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>) &#125;</span><br><span class="line"><span class="comment">//        maven &#123; url &#x27;https://maven.aliyun.com/repository/public/&#x27; &#125;</span></span><br><span class="line">        maven &#123; url = uri(<span class="string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>) &#125;</span><br><span class="line">        maven &#123; url = uri(<span class="string">&quot;https://maven.aliyun.com/repository/central&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面三个是原有的</span></span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">//下面两个是我们自己加的</span></span><br><span class="line">        maven &#123; url = uri(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>) &#125;</span><br><span class="line">        maven &#123; url =uri(<span class="string">&quot;https://maven.aliyun.com/repository/central&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面两个是原有的</span></span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.name = <span class="string">&quot;My Application&quot;</span></span><br><span class="line">include(<span class="string">&quot;:app&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/../picture/Android/image-20240920220103781.png" alt="image-20240920220103781"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="1-3-重新下载需要依赖的包"><a href="#1-3-重新下载需要依赖的包" class="headerlink" title="1.3 重新下载需要依赖的包"></a>1.3 重新下载需要依赖的包</h3><p><img src="/../picture/Android/image-20240920220131556.png" alt="image-20240920220131556"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现下面的内容表示下载成功</span></span><br><span class="line"></span><br><span class="line">Starting Gradle Daemon...</span><br><span class="line">Gradle Daemon started in 1 s 202 ms</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Task :prepareKotlinBuildScriptModel UP-TO-DATE</span></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 40s</span><br></pre></td></tr></table></figure>

<p><img src="/../picture/Android/image-20240920220235332.png" alt="image-20240920220235332"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="2-修改gradle包的位置"><a href="#2-修改gradle包的位置" class="headerlink" title="2. 修改gradle包的位置"></a>2. 修改gradle包的位置</h2><h3 id="2-1-打开设置找到gradle选项，默认是-C-Users-JarryLi-gradle-JarryLi为自己的用户名"><a href="#2-1-打开设置找到gradle选项，默认是-C-Users-JarryLi-gradle-JarryLi为自己的用户名" class="headerlink" title="2.1 打开设置找到gradle选项，默认是 C:\Users\JarryLi.gradle (JarryLi为自己的用户名)"></a>2.1 打开设置找到gradle选项，默认是 <strong>C:\Users\JarryLi.gradle</strong> (JarryLi为自己的用户名)</h3><p><img src="/../picture/Android/image-20240920220254843.png" alt="image-20240920220254843"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/../picture/Android/image-20240920221540548.png" alt="image-20240920221540548"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><font color=red>Warning: 右侧的文件夹可以更改设置，但是只是对该项目生效；从 All settings… 修改也是无效的。（但是idea中这么设置是有效的）</font></p>
<h3 id="2-2-添加环境变量"><a href="#2-2-添加环境变量" class="headerlink" title="2.2 添加环境变量"></a>2.2 添加环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRADLE_USER_HOME</span><br><span class="line"></span><br><span class="line">F:\Develop\Android\gradle-8.7 # 这里改成自己存储 gradle 的路径</span><br></pre></td></tr></table></figure>

<p><font color=red>Warning: 添加完之后一定要重启系统!!!</font></p>
<p><img src="/../picture/Android/image-20240920220327333.png" alt="image-20240920220327333"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="2-3-gradle文件夹详细内容"><a href="#2-3-gradle文件夹详细内容" class="headerlink" title="2.3 gradle文件夹详细内容"></a>2.3 gradle文件夹详细内容</h3><p><img src="/../picture/Android/image-20240920220359993.png" alt="image-20240920220359993"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
</search>
